03bf2b2cc116862198dbdcfd23fd2826
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const log_in_component_1 = require("./log-in.component");
const usuario_service_1 = require("./usuario.service");
const router_1 = require("@angular/router");
const rxjs_1 = require("rxjs");
const UsuarioServiceMock = {
    postAdministrador: (0, rxjs_1.of)({}) //jest.fn()
};
describe('LogInComponent', () => {
    let component;
    let fixture;
    beforeEach(async () => {
        await testing_1.TestBed.configureTestingModule({
            // declarations: [
            //   LogInComponent,
            // ],      
            imports: [log_in_component_1.LogInComponent, testing_2.HttpClientTestingModule], //NO borrar esta parte
            providers: [{ provide: usuario_service_1.UsuarioService, useValue: UsuarioServiceMock }, { provide: router_1.ActivatedRoute, useValue: { paramMap: (0, rxjs_1.of)({}) } }]
        })
            .compileComponents();
        fixture = testing_1.TestBed.createComponent(log_in_component_1.LogInComponent);
        component = fixture.componentInstance;
        fixture.detectChanges();
        let service = testing_1.TestBed.inject(usuario_service_1.UsuarioService);
        fixture.detectChanges();
    });
    it('should create', () => {
        const fixture = testing_1.TestBed.createComponent(log_in_component_1.LogInComponent);
        const app = fixture.componentInstance;
        expect(app).toBeTruthy();
    });
    it('llamada a postAdministrador', () => {
        const fixture = testing_1.TestBed.createComponent(log_in_component_1.LogInComponent);
        const app = fixture.componentInstance;
        app.enviarUsuario();
        expect(UsuarioServiceMock.postAdministrador).toHaveBeenCalled();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvdGVuZXQ3NzUwL3RwZGVzYXJyb2xsb2ZlL0xpYmVydGFkbnQtRnJvbnRFbmQvc3JjL2FwcC9sb2ctaW4vbG9nLWluLmNvbXBvbmVudC5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsbURBQWtFO0FBQ2xFLDBEQUE2RjtBQUM3Rix5REFBbUQ7QUFDbkQsdURBQWtEO0FBQ2xELDRDQUFpRDtBQUNqRCwrQkFBMEI7QUFFMUIsTUFBTSxrQkFBa0IsR0FBRztJQUN6QixpQkFBaUIsRUFBRSxJQUFBLFNBQUUsRUFBQyxFQUFFLENBQUMsQ0FBQSxXQUFXO0NBQ3JDLENBQUE7QUFFRCxRQUFRLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxFQUFFO0lBQzlCLElBQUksU0FBeUIsQ0FBQztJQUM5QixJQUFJLE9BQXlDLENBQUM7SUFFOUMsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3BCLE1BQU0saUJBQU8sQ0FBQyxzQkFBc0IsQ0FBQztZQUNuQyxrQkFBa0I7WUFDbEIsb0JBQW9CO1lBQ3BCLFdBQVc7WUFDWCxPQUFPLEVBQUUsQ0FBQyxpQ0FBYyxFQUFFLGlDQUF1QixDQUFDLEVBQUUsc0JBQXNCO1lBQzFFLFNBQVMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFFLGdDQUFjLEVBQUUsUUFBUSxFQUFFLGtCQUFrQixFQUFDLEVBQUUsRUFBQyxPQUFPLEVBQUUsdUJBQWMsRUFBRSxRQUFRLEVBQUUsRUFBQyxRQUFRLEVBQUUsSUFBQSxTQUFFLEVBQUMsRUFBRSxDQUFDLEVBQUMsRUFBQyxDQUFDO1NBQzlILENBQUM7YUFDRCxpQkFBaUIsRUFBRSxDQUFBO1FBRXBCLE9BQU8sR0FBRyxpQkFBTyxDQUFDLGVBQWUsQ0FBQyxpQ0FBYyxDQUFDLENBQUE7UUFDakQsU0FBUyxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQTtRQUNyQyxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUE7UUFDdkIsSUFBSSxPQUFPLEdBQUcsaUJBQU8sQ0FBQyxNQUFNLENBQUMsZ0NBQWMsQ0FBQyxDQUFBO1FBQzVDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQTtJQUN6QixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxlQUFlLEVBQUUsR0FBRyxFQUFFO1FBQ3ZCLE1BQU0sT0FBTyxHQUFHLGlCQUFPLENBQUMsZUFBZSxDQUFDLGlDQUFjLENBQUMsQ0FBQztRQUN4RCxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUM7UUFDdEMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQzNCLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLDZCQUE2QixFQUFDLEdBQUUsRUFBRTtRQUNuQyxNQUFNLE9BQU8sR0FBRyxpQkFBTyxDQUFDLGVBQWUsQ0FBQyxpQ0FBYyxDQUFDLENBQUM7UUFDeEQsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFDO1FBQ3RDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsQ0FBQTtRQUNuQixNQUFNLENBQUMsa0JBQWtCLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFBO0lBQ2pFLENBQUMsQ0FBQyxDQUFBO0FBRUosQ0FBQyxDQUFDLENBQUMiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvdGVuZXQ3NzUwL3RwZGVzYXJyb2xsb2ZlL0xpYmVydGFkbnQtRnJvbnRFbmQvc3JjL2FwcC9sb2ctaW4vbG9nLWluLmNvbXBvbmVudC5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudEZpeHR1cmUsIFRlc3RCZWQgfSBmcm9tICdAYW5ndWxhci9jb3JlL3Rlc3RpbmcnO1xuaW1wb3J0IHsgSHR0cENsaWVudFRlc3RpbmdNb2R1bGUsIEh0dHBUZXN0aW5nQ29udHJvbGxlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwL3Rlc3RpbmcnXG5pbXBvcnQgeyBMb2dJbkNvbXBvbmVudCB9IGZyb20gJy4vbG9nLWluLmNvbXBvbmVudCdcbmltcG9ydCB7IFVzdWFyaW9TZXJ2aWNlIH0gZnJvbSAnLi91c3VhcmlvLnNlcnZpY2UnXG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBvZiB9IGZyb20gJ3J4anMnO1xuXG5jb25zdCBVc3VhcmlvU2VydmljZU1vY2sgPSB7XG4gIHBvc3RBZG1pbmlzdHJhZG9yOiBvZih7fSkvL2plc3QuZm4oKVxufVxuXG5kZXNjcmliZSgnTG9nSW5Db21wb25lbnQnLCAoKSA9PiB7XG4gIGxldCBjb21wb25lbnQ6IExvZ0luQ29tcG9uZW50O1xuICBsZXQgZml4dHVyZTogQ29tcG9uZW50Rml4dHVyZTxMb2dJbkNvbXBvbmVudD47XG5cbiAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgVGVzdEJlZC5jb25maWd1cmVUZXN0aW5nTW9kdWxlKHtcbiAgICAgIC8vIGRlY2xhcmF0aW9uczogW1xuICAgICAgLy8gICBMb2dJbkNvbXBvbmVudCxcbiAgICAgIC8vIF0sICAgICAgXG4gICAgICBpbXBvcnRzOiBbTG9nSW5Db21wb25lbnQsIEh0dHBDbGllbnRUZXN0aW5nTW9kdWxlXSwgLy9OTyBib3JyYXIgZXN0YSBwYXJ0ZVxuICAgICAgcHJvdmlkZXJzOiBbe3Byb3ZpZGU6IFVzdWFyaW9TZXJ2aWNlLCB1c2VWYWx1ZTogVXN1YXJpb1NlcnZpY2VNb2NrfSwge3Byb3ZpZGU6IEFjdGl2YXRlZFJvdXRlLCB1c2VWYWx1ZToge3BhcmFtTWFwOiBvZih7fSl9fV1cbiAgICB9KVxuICAgIC5jb21waWxlQ29tcG9uZW50cygpXG5cbiAgICBmaXh0dXJlID0gVGVzdEJlZC5jcmVhdGVDb21wb25lbnQoTG9nSW5Db21wb25lbnQpXG4gICAgY29tcG9uZW50ID0gZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZVxuICAgIGZpeHR1cmUuZGV0ZWN0Q2hhbmdlcygpXG4gICAgbGV0IHNlcnZpY2UgPSBUZXN0QmVkLmluamVjdChVc3VhcmlvU2VydmljZSlcbiAgICBmaXh0dXJlLmRldGVjdENoYW5nZXMoKVxuICB9KTtcblxuICBpdCgnc2hvdWxkIGNyZWF0ZScsICgpID0+IHtcbiAgICBjb25zdCBmaXh0dXJlID0gVGVzdEJlZC5jcmVhdGVDb21wb25lbnQoTG9nSW5Db21wb25lbnQpO1xuICAgIGNvbnN0IGFwcCA9IGZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgZXhwZWN0KGFwcCkudG9CZVRydXRoeSgpO1xuICB9KTtcblxuICBpdCgnbGxhbWFkYSBhIHBvc3RBZG1pbmlzdHJhZG9yJywoKT0+e1xuICAgIGNvbnN0IGZpeHR1cmUgPSBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChMb2dJbkNvbXBvbmVudCk7XG4gICAgY29uc3QgYXBwID0gZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBhcHAuZW52aWFyVXN1YXJpbygpXG4gICAgZXhwZWN0KFVzdWFyaW9TZXJ2aWNlTW9jay5wb3N0QWRtaW5pc3RyYWRvcikudG9IYXZlQmVlbkNhbGxlZCgpXG4gIH0pXG5cbn0pO1xuXG5cblxuXG4iXSwidmVyc2lvbiI6M30=