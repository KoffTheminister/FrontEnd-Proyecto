446658b2d53dab24c28145b75a289fbb
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const log_in_component_1 = require("./log-in.component");
const usuario_service_1 = require("./usuario.service");
const router_1 = require("@angular/router");
const rxjs_1 = require("rxjs");
const un_usuario = {
    "cod_administrador": 1,
    "contrasenia": "123r"
};
const UsuarioServiceMock = {
    postAdministrador: jest.fn(() => {
        return (0, rxjs_1.of)({});
    })
};
describe('LogInComponent', () => {
    let component;
    let fixture;
    beforeEach(async () => {
        await testing_1.TestBed.configureTestingModule({
            // declarations: [
            //   LogInComponent,
            // ],      
            imports: [log_in_component_1.LogInComponent, testing_2.HttpClientTestingModule], //NO borrar esta parte
            providers: [{ provide: usuario_service_1.UsuarioService, useValue: UsuarioServiceMock }, { provide: router_1.ActivatedRoute, useValue: { paramMap: (0, rxjs_1.of)({}) } }]
        })
            .compileComponents();
        fixture = testing_1.TestBed.createComponent(log_in_component_1.LogInComponent);
        component = fixture.componentInstance;
        fixture.detectChanges();
        let service = testing_1.TestBed.inject(usuario_service_1.UsuarioService);
        fixture.detectChanges();
        UsuarioServiceMock.postAdministrador.mockReturnValue((0, rxjs_1.of)({}));
    });
    it('should create', () => {
        const fixture = testing_1.TestBed.createComponent(log_in_component_1.LogInComponent);
        const app = fixture.componentInstance;
        expect(app).toBeTruthy();
    });
    it('llamada a postAdministrador', () => {
        const fixture = testing_1.TestBed.createComponent(log_in_component_1.LogInComponent);
        const app = fixture.componentInstance;
        app.enviarUsuario();
        expect(UsuarioServiceMock.postAdministrador().subscribe).toHaveBeenCalled();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvdGVuZXQ3NzUwL3RwZGVzYXJyb2xsb2ZlL0xpYmVydGFkbnQtRnJvbnRFbmQvc3JjL2FwcC9sb2ctaW4vbG9nLWluLmNvbXBvbmVudC5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsbURBQWtFO0FBQ2xFLDBEQUE2RjtBQUM3Rix5REFBbUQ7QUFDbkQsdURBQWtEO0FBQ2xELDRDQUFpRDtBQUNqRCwrQkFBeUI7QUFFekIsTUFBTSxVQUFVLEdBQUc7SUFDakIsbUJBQW1CLEVBQUUsQ0FBQztJQUN0QixhQUFhLEVBQUUsTUFBTTtDQUN0QixDQUFBO0FBRUQsTUFBTSxrQkFBa0IsR0FBRztJQUN6QixpQkFBaUIsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRTtRQUM5QixPQUFPLElBQUEsU0FBRSxFQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ2YsQ0FBQyxDQUFDO0NBQ0gsQ0FBQTtBQUVELFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7SUFDOUIsSUFBSSxTQUF5QixDQUFDO0lBQzlCLElBQUksT0FBeUMsQ0FBQztJQUU5QyxVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDcEIsTUFBTSxpQkFBTyxDQUFDLHNCQUFzQixDQUFDO1lBQ25DLGtCQUFrQjtZQUNsQixvQkFBb0I7WUFDcEIsV0FBVztZQUNYLE9BQU8sRUFBRSxDQUFDLGlDQUFjLEVBQUUsaUNBQXVCLENBQUMsRUFBRSxzQkFBc0I7WUFDMUUsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsZ0NBQWMsRUFBRSxRQUFRLEVBQUUsa0JBQWtCLEVBQUMsRUFBRSxFQUFDLE9BQU8sRUFBRSx1QkFBYyxFQUFFLFFBQVEsRUFBRSxFQUFDLFFBQVEsRUFBRSxJQUFBLFNBQUUsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLENBQUM7U0FDOUgsQ0FBQzthQUNELGlCQUFpQixFQUFFLENBQUE7UUFFcEIsT0FBTyxHQUFHLGlCQUFPLENBQUMsZUFBZSxDQUFDLGlDQUFjLENBQUMsQ0FBQTtRQUNqRCxTQUFTLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFBO1FBQ3JDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQTtRQUN2QixJQUFJLE9BQU8sR0FBRyxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxnQ0FBYyxDQUFDLENBQUE7UUFDNUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUFBO1FBQ3ZCLGtCQUFrQixDQUFDLGlCQUFpQixDQUFDLGVBQWUsQ0FBQyxJQUFBLFNBQUUsRUFBQyxFQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ2hFLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUU7UUFDdkIsTUFBTSxPQUFPLEdBQUcsaUJBQU8sQ0FBQyxlQUFlLENBQUMsaUNBQWMsQ0FBQyxDQUFBO1FBQ3ZELE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQTtRQUNyQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUE7SUFDMUIsQ0FBQyxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMsNkJBQTZCLEVBQUUsR0FBRyxFQUFFO1FBQ3JDLE1BQU0sT0FBTyxHQUFHLGlCQUFPLENBQUMsZUFBZSxDQUFDLGlDQUFjLENBQUMsQ0FBQTtRQUN2RCxNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUE7UUFDckMsR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUFBO1FBQ25CLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLGdCQUFnQixFQUFFLENBQUE7SUFFN0UsQ0FBQyxDQUFDLENBQUE7QUFFSixDQUFDLENBQUMsQ0FBQSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS90ZW5ldDc3NTAvdHBkZXNhcnJvbGxvZmUvTGliZXJ0YWRudC1Gcm9udEVuZC9zcmMvYXBwL2xvZy1pbi9sb2ctaW4uY29tcG9uZW50LnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50Rml4dHVyZSwgVGVzdEJlZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50VGVzdGluZ01vZHVsZSwgSHR0cFRlc3RpbmdDb250cm9sbGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAvdGVzdGluZydcbmltcG9ydCB7IExvZ0luQ29tcG9uZW50IH0gZnJvbSAnLi9sb2ctaW4uY29tcG9uZW50J1xuaW1wb3J0IHsgVXN1YXJpb1NlcnZpY2UgfSBmcm9tICcuL3VzdWFyaW8uc2VydmljZSdcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IG9mIH0gZnJvbSAncnhqcydcblxuY29uc3QgdW5fdXN1YXJpbyA9IHtcbiAgXCJjb2RfYWRtaW5pc3RyYWRvclwiOiAxLFxuICBcImNvbnRyYXNlbmlhXCI6IFwiMTIzclwiXG59XG5cbmNvbnN0IFVzdWFyaW9TZXJ2aWNlTW9jayA9IHtcbiAgcG9zdEFkbWluaXN0cmFkb3I6IGplc3QuZm4oKCkgPT4ge1xuICAgIHJldHVybiBvZih7fSlcbiAgfSlcbn1cblxuZGVzY3JpYmUoJ0xvZ0luQ29tcG9uZW50JywgKCkgPT4ge1xuICBsZXQgY29tcG9uZW50OiBMb2dJbkNvbXBvbmVudDtcbiAgbGV0IGZpeHR1cmU6IENvbXBvbmVudEZpeHR1cmU8TG9nSW5Db21wb25lbnQ+O1xuXG4gIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgIGF3YWl0IFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XG4gICAgICAvLyBkZWNsYXJhdGlvbnM6IFtcbiAgICAgIC8vICAgTG9nSW5Db21wb25lbnQsXG4gICAgICAvLyBdLCAgICAgIFxuICAgICAgaW1wb3J0czogW0xvZ0luQ29tcG9uZW50LCBIdHRwQ2xpZW50VGVzdGluZ01vZHVsZV0sIC8vTk8gYm9ycmFyIGVzdGEgcGFydGVcbiAgICAgIHByb3ZpZGVyczogW3twcm92aWRlOiBVc3VhcmlvU2VydmljZSwgdXNlVmFsdWU6IFVzdWFyaW9TZXJ2aWNlTW9ja30sIHtwcm92aWRlOiBBY3RpdmF0ZWRSb3V0ZSwgdXNlVmFsdWU6IHtwYXJhbU1hcDogb2Yoe30pfX1dXG4gICAgfSlcbiAgICAuY29tcGlsZUNvbXBvbmVudHMoKVxuXG4gICAgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KExvZ0luQ29tcG9uZW50KVxuICAgIGNvbXBvbmVudCA9IGZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2VcbiAgICBmaXh0dXJlLmRldGVjdENoYW5nZXMoKVxuICAgIGxldCBzZXJ2aWNlID0gVGVzdEJlZC5pbmplY3QoVXN1YXJpb1NlcnZpY2UpXG4gICAgZml4dHVyZS5kZXRlY3RDaGFuZ2VzKClcbiAgICBVc3VhcmlvU2VydmljZU1vY2sucG9zdEFkbWluaXN0cmFkb3IubW9ja1JldHVyblZhbHVlKG9mKHsgfSkpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIGNyZWF0ZScsICgpID0+IHtcbiAgICBjb25zdCBmaXh0dXJlID0gVGVzdEJlZC5jcmVhdGVDb21wb25lbnQoTG9nSW5Db21wb25lbnQpXG4gICAgY29uc3QgYXBwID0gZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZVxuICAgIGV4cGVjdChhcHApLnRvQmVUcnV0aHkoKVxuICB9KVxuXG4gIGl0KCdsbGFtYWRhIGEgcG9zdEFkbWluaXN0cmFkb3InLCAoKSA9PiB7XG4gICAgY29uc3QgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KExvZ0luQ29tcG9uZW50KVxuICAgIGNvbnN0IGFwcCA9IGZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2VcbiAgICBhcHAuZW52aWFyVXN1YXJpbygpXG4gICAgZXhwZWN0KFVzdWFyaW9TZXJ2aWNlTW9jay5wb3N0QWRtaW5pc3RyYWRvcigpLnN1YnNjcmliZSkudG9IYXZlQmVlbkNhbGxlZCgpXG5cbiAgfSlcblxufSlcblxuXG5cblxuIl0sInZlcnNpb24iOjN9