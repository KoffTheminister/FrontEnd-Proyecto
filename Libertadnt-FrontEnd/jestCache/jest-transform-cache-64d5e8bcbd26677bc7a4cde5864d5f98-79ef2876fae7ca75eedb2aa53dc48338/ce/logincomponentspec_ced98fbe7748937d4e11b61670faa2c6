a21f367f62717326b6f9349d8af8514e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const log_in_component_1 = require("./log-in.component");
const usuario_service_1 = require("./usuario.service");
const router_1 = require("@angular/router");
const rxjs_1 = require("rxjs");
const un_usuario = {
    "cod_administrador": 1,
    "contrasenia": "123r"
};
const UsuarioServiceMock = {
    postAdministrador: jest.fn(() => {
        return (0, rxjs_1.of)();
    })
};
describe('LogInComponent', () => {
    let component;
    let fixture;
    beforeEach(async () => {
        await testing_1.TestBed.configureTestingModule({
            // declarations: [
            //   LogInComponent,
            // ],      
            imports: [log_in_component_1.LogInComponent, testing_2.HttpClientTestingModule], //NO borrar esta parte
            providers: [{ provide: usuario_service_1.UsuarioService, useValue: UsuarioServiceMock }, { provide: router_1.ActivatedRoute, useValue: { paramMap: (0, rxjs_1.of)({}) } }]
        })
            .compileComponents();
        fixture = testing_1.TestBed.createComponent(log_in_component_1.LogInComponent);
        component = fixture.componentInstance;
        fixture.detectChanges();
        let service = testing_1.TestBed.inject(usuario_service_1.UsuarioService);
        fixture.detectChanges();
    });
    it('should create', () => {
        const fixture = testing_1.TestBed.createComponent(log_in_component_1.LogInComponent);
        const app = fixture.componentInstance;
        expect(app).toBeTruthy();
    });
    it('llamada a postAdministrador', () => {
        const fixture = testing_1.TestBed.createComponent(log_in_component_1.LogInComponent);
        const app = fixture.componentInstance;
        app.enviarUsuario();
        expect(UsuarioServiceMock.postAdministrador()).toHaveBeenCalled();
        //expect(UsuarioServiceMock.postAdministrador())
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvdGVuZXQ3NzUwL3RwZGVzYXJyb2xsb2ZlL0xpYmVydGFkbnQtRnJvbnRFbmQvc3JjL2FwcC9sb2ctaW4vbG9nLWluLmNvbXBvbmVudC5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsbURBQWtFO0FBQ2xFLDBEQUE2RjtBQUM3Rix5REFBbUQ7QUFDbkQsdURBQWtEO0FBQ2xELDRDQUFpRDtBQUNqRCwrQkFBeUI7QUFHekIsTUFBTSxVQUFVLEdBQUc7SUFDakIsbUJBQW1CLEVBQUUsQ0FBQztJQUN0QixhQUFhLEVBQUUsTUFBTTtDQUN0QixDQUFBO0FBRUQsTUFBTSxrQkFBa0IsR0FBRztJQUN6QixpQkFBaUIsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRTtRQUM5QixPQUFPLElBQUEsU0FBRSxHQUFFLENBQUE7SUFDYixDQUFDLENBQUM7Q0FDSCxDQUFBO0FBRUQsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtJQUM5QixJQUFJLFNBQXlCLENBQUM7SUFDOUIsSUFBSSxPQUF5QyxDQUFDO0lBRTlDLFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNwQixNQUFNLGlCQUFPLENBQUMsc0JBQXNCLENBQUM7WUFDbkMsa0JBQWtCO1lBQ2xCLG9CQUFvQjtZQUNwQixXQUFXO1lBQ1gsT0FBTyxFQUFFLENBQUMsaUNBQWMsRUFBRSxpQ0FBdUIsQ0FBQyxFQUFFLHNCQUFzQjtZQUMxRSxTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxnQ0FBYyxFQUFFLFFBQVEsRUFBRSxrQkFBa0IsRUFBQyxFQUFFLEVBQUMsT0FBTyxFQUFFLHVCQUFjLEVBQUUsUUFBUSxFQUFFLEVBQUMsUUFBUSxFQUFFLElBQUEsU0FBRSxFQUFDLEVBQUUsQ0FBQyxFQUFDLEVBQUMsQ0FBQztTQUM5SCxDQUFDO2FBQ0QsaUJBQWlCLEVBQUUsQ0FBQTtRQUVwQixPQUFPLEdBQUcsaUJBQU8sQ0FBQyxlQUFlLENBQUMsaUNBQWMsQ0FBQyxDQUFBO1FBQ2pELFNBQVMsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUE7UUFDckMsT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUFBO1FBQ3ZCLElBQUksT0FBTyxHQUFHLGlCQUFPLENBQUMsTUFBTSxDQUFDLGdDQUFjLENBQUMsQ0FBQTtRQUM1QyxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUE7SUFDekIsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMsZUFBZSxFQUFFLEdBQUcsRUFBRTtRQUN2QixNQUFNLE9BQU8sR0FBRyxpQkFBTyxDQUFDLGVBQWUsQ0FBQyxpQ0FBYyxDQUFDLENBQUE7UUFDdkQsTUFBTSxHQUFHLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFBO1FBQ3JDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQTtJQUMxQixDQUFDLENBQUMsQ0FBQTtJQUVGLEVBQUUsQ0FBQyw2QkFBNkIsRUFBRSxHQUFHLEVBQUU7UUFDckMsTUFBTSxPQUFPLEdBQUcsaUJBQU8sQ0FBQyxlQUFlLENBQUMsaUNBQWMsQ0FBQyxDQUFBO1FBQ3ZELE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQTtRQUNyQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUE7UUFDbkIsTUFBTSxDQUFDLGtCQUFrQixDQUFDLGlCQUFpQixFQUFFLENBQUMsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFBO1FBQ2pFLGdEQUFnRDtJQUNsRCxDQUFDLENBQUMsQ0FBQTtBQUVKLENBQUMsQ0FBQyxDQUFBIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3RlbmV0Nzc1MC90cGRlc2Fycm9sbG9mZS9MaWJlcnRhZG50LUZyb250RW5kL3NyYy9hcHAvbG9nLWluL2xvZy1pbi5jb21wb25lbnQuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRGaXh0dXJlLCBUZXN0QmVkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZS90ZXN0aW5nJztcbmltcG9ydCB7IEh0dHBDbGllbnRUZXN0aW5nTW9kdWxlLCBIdHRwVGVzdGluZ0NvbnRyb2xsZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cC90ZXN0aW5nJ1xuaW1wb3J0IHsgTG9nSW5Db21wb25lbnQgfSBmcm9tICcuL2xvZy1pbi5jb21wb25lbnQnXG5pbXBvcnQgeyBVc3VhcmlvU2VydmljZSB9IGZyb20gJy4vdXN1YXJpby5zZXJ2aWNlJ1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgb2YgfSBmcm9tICdyeGpzJ1xuaW1wb3J0IHsgZmluZENvbmZpZ0ZpbGUgfSBmcm9tICd0eXBlc2NyaXB0JztcblxuY29uc3QgdW5fdXN1YXJpbyA9IHtcbiAgXCJjb2RfYWRtaW5pc3RyYWRvclwiOiAxLFxuICBcImNvbnRyYXNlbmlhXCI6IFwiMTIzclwiXG59XG5cbmNvbnN0IFVzdWFyaW9TZXJ2aWNlTW9jayA9IHtcbiAgcG9zdEFkbWluaXN0cmFkb3I6IGplc3QuZm4oKCkgPT4ge1xuICAgIHJldHVybiBvZigpXG4gIH0pXG59XG5cbmRlc2NyaWJlKCdMb2dJbkNvbXBvbmVudCcsICgpID0+IHtcbiAgbGV0IGNvbXBvbmVudDogTG9nSW5Db21wb25lbnQ7XG4gIGxldCBmaXh0dXJlOiBDb21wb25lbnRGaXh0dXJlPExvZ0luQ29tcG9uZW50PjtcblxuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgLy8gZGVjbGFyYXRpb25zOiBbXG4gICAgICAvLyAgIExvZ0luQ29tcG9uZW50LFxuICAgICAgLy8gXSwgICAgICBcbiAgICAgIGltcG9ydHM6IFtMb2dJbkNvbXBvbmVudCwgSHR0cENsaWVudFRlc3RpbmdNb2R1bGVdLCAvL05PIGJvcnJhciBlc3RhIHBhcnRlXG4gICAgICBwcm92aWRlcnM6IFt7cHJvdmlkZTogVXN1YXJpb1NlcnZpY2UsIHVzZVZhbHVlOiBVc3VhcmlvU2VydmljZU1vY2t9LCB7cHJvdmlkZTogQWN0aXZhdGVkUm91dGUsIHVzZVZhbHVlOiB7cGFyYW1NYXA6IG9mKHt9KX19XVxuICAgIH0pXG4gICAgLmNvbXBpbGVDb21wb25lbnRzKClcblxuICAgIGZpeHR1cmUgPSBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChMb2dJbkNvbXBvbmVudClcbiAgICBjb21wb25lbnQgPSBmaXh0dXJlLmNvbXBvbmVudEluc3RhbmNlXG4gICAgZml4dHVyZS5kZXRlY3RDaGFuZ2VzKClcbiAgICBsZXQgc2VydmljZSA9IFRlc3RCZWQuaW5qZWN0KFVzdWFyaW9TZXJ2aWNlKVxuICAgIGZpeHR1cmUuZGV0ZWN0Q2hhbmdlcygpXG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgY3JlYXRlJywgKCkgPT4ge1xuICAgIGNvbnN0IGZpeHR1cmUgPSBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChMb2dJbkNvbXBvbmVudClcbiAgICBjb25zdCBhcHAgPSBmaXh0dXJlLmNvbXBvbmVudEluc3RhbmNlXG4gICAgZXhwZWN0KGFwcCkudG9CZVRydXRoeSgpXG4gIH0pXG5cbiAgaXQoJ2xsYW1hZGEgYSBwb3N0QWRtaW5pc3RyYWRvcicsICgpID0+IHtcbiAgICBjb25zdCBmaXh0dXJlID0gVGVzdEJlZC5jcmVhdGVDb21wb25lbnQoTG9nSW5Db21wb25lbnQpXG4gICAgY29uc3QgYXBwID0gZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZVxuICAgIGFwcC5lbnZpYXJVc3VhcmlvKClcbiAgICBleHBlY3QoVXN1YXJpb1NlcnZpY2VNb2NrLnBvc3RBZG1pbmlzdHJhZG9yKCkpLnRvSGF2ZUJlZW5DYWxsZWQoKVxuICAgIC8vZXhwZWN0KFVzdWFyaW9TZXJ2aWNlTW9jay5wb3N0QWRtaW5pc3RyYWRvcigpKVxuICB9KVxuXG59KVxuXG5cblxuXG4iXSwidmVyc2lvbiI6M30=