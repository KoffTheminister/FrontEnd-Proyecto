0f1227b6046ebc524bc643f7f68ec273
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/common/http/testing");
const testing_2 = require("@angular/core/testing");
const reclusos_service_1 = require("./reclusos.service");
describe('ReclusoService tests', () => {
    let r_service;
    let controller;
    let nuevo_recluso = {
        "nombre": "Brittney",
        "apellido": "Spears",
        "dni": 2020752,
        "fecha_nac": "2004-01-01"
    };
    let nueva_condena = {
        "cod_recluso": 4,
        "cod_sentencias": [1, 2]
    };
    let unos_reclusos = [
        {
            "cod_recluso": 1,
            "nombre": "Juan",
            "apellido": "Macron",
            "dni": 2020202,
            "fecha_nac": "2004-01-01"
        },
        {
            "cod_recluso": 2,
            "nombre": "Estevan",
            "apellido": "Quito",
            "dni": 2020203,
            "fecha_nac": "2004-01-01"
        },
        {
            "cod_recluso": 3,
            "nombre": "Carlos",
            "apellido": "Fredicksen",
            "dni": 2020204,
            "fecha_nac": "2004-01-01"
        }
    ];
    beforeEach(async () => {
        testing_2.TestBed.configureTestingModule({
            imports: [
                testing_1.HttpClientTestingModule //NO borrar esta parte
            ],
            providers: [
                reclusos_service_1.ReclusosService,
            ]
        });
        r_service = testing_2.TestBed.inject(reclusos_service_1.ReclusosService);
        controller = testing_2.TestBed.inject(testing_1.HttpTestingController);
    });
    it('deberia crear un servicio', () => {
        expect(r_service).toBeTruthy();
    });
    it('deberia devolver un solo recluso', () => {
        let cod_recluso = 2;
        r_service.getOneRecluso(cod_recluso).subscribe(response => {
            let recluso = unos_reclusos[0];
            expect(recluso.nombre).toEqual('Juan');
            expect(recluso.apellido).toEqual('Macron');
        });
        const request = controller.expectOne("http://localhost:8080/reclusos/" + `${cod_recluso}`);
        request.flush(unos_reclusos[0]);
    });
    it('deberia devolver todos los reclusos', () => {
        r_service.getReclusos().subscribe((response) => {
            expect(unos_reclusos.length).toBeGreaterThan(0);
        });
        const request = controller.expectOne("http://localhost:8080/reclusos");
        request.flush(unos_reclusos);
    });
    it('deberia crear un recluso', () => {
        const mockResponse = { id: 4 };
        r_service.postRecluso(nuevo_recluso).subscribe(response => {
            expect(response).toEqual(mockResponse);
        });
        const request = controller.expectOne('http://localhost:8080/reclusos/');
        expect(request.request.method).toBe('POST');
        expect(request.request.body).toEqual(nuevo_recluso);
        request.flush(mockResponse);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvdGVuZXQ3NzUwL3RwZGVzYXJyb2xsb2ZlL0xpYmVydGFkbnQtRnJvbnRFbmQvc3JjL2FwcC9yZWNsdXNvcy9yZWNsdXNvcy5zZXJ2aWNlLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSwwREFBNkY7QUFDN0YsbURBQStDO0FBQy9DLHlEQUFvRDtBQUdwRCxRQUFRLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO0lBQ2xDLElBQUksU0FBMEIsQ0FBQTtJQUM5QixJQUFJLFVBQWlDLENBQUE7SUFDckMsSUFBSSxhQUFhLEdBQUc7UUFDbEIsUUFBUSxFQUFFLFVBQVU7UUFDcEIsVUFBVSxFQUFFLFFBQVE7UUFDcEIsS0FBSyxFQUFFLE9BQU87UUFDZCxXQUFXLEVBQUUsWUFBWTtLQUMxQixDQUFBO0lBRUQsSUFBSSxhQUFhLEdBQUc7UUFDbEIsYUFBYSxFQUFFLENBQUM7UUFDaEIsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ3pCLENBQUE7SUFFRCxJQUFJLGFBQWEsR0FBRztRQUNsQjtZQUNFLGFBQWEsRUFBRSxDQUFDO1lBQ2hCLFFBQVEsRUFBRSxNQUFNO1lBQ2hCLFVBQVUsRUFBRSxRQUFRO1lBQ3BCLEtBQUssRUFBRSxPQUFPO1lBQ2QsV0FBVyxFQUFFLFlBQVk7U0FDMUI7UUFDRDtZQUNFLGFBQWEsRUFBRSxDQUFDO1lBQ2hCLFFBQVEsRUFBRSxTQUFTO1lBQ25CLFVBQVUsRUFBRSxPQUFPO1lBQ25CLEtBQUssRUFBRSxPQUFPO1lBQ2QsV0FBVyxFQUFFLFlBQVk7U0FDMUI7UUFDRDtZQUNFLGFBQWEsRUFBRSxDQUFDO1lBQ2hCLFFBQVEsRUFBRSxRQUFRO1lBQ2xCLFVBQVUsRUFBRSxZQUFZO1lBQ3hCLEtBQUssRUFBRSxPQUFPO1lBQ2QsV0FBVyxFQUFFLFlBQVk7U0FDMUI7S0FDRixDQUFBO0lBRUQsVUFBVSxDQUFDLEtBQUssSUFBSSxFQUFFO1FBQ3BCLGlCQUFPLENBQUMsc0JBQXNCLENBQUM7WUFDM0IsT0FBTyxFQUFFO2dCQUNMLGlDQUF1QixDQUFDLHNCQUFzQjthQUNqRDtZQUNELFNBQVMsRUFBRTtnQkFDVCxrQ0FBZTthQUNoQjtTQUNKLENBQUMsQ0FBQTtRQUNGLFNBQVMsR0FBRyxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxrQ0FBZSxDQUFDLENBQUE7UUFDM0MsVUFBVSxHQUFHLGlCQUFPLENBQUMsTUFBTSxDQUFDLCtCQUFxQixDQUFDLENBQUE7SUFDcEQsQ0FBQyxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMsMkJBQTJCLEVBQUUsR0FBRyxFQUFFO1FBQ25DLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQTtJQUNoQyxDQUFDLENBQUMsQ0FBQTtJQUVGLEVBQUUsQ0FBQyxrQ0FBa0MsRUFBRSxHQUFHLEVBQUU7UUFDMUMsSUFBSSxXQUFXLEdBQUcsQ0FBQyxDQUFBO1FBQ25CLFNBQVMsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ3hELElBQUksT0FBTyxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUM5QixNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQTtZQUN0QyxNQUFNLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUM1QyxDQUFDLENBQUMsQ0FBQTtRQUVGLE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsaUNBQWlDLEdBQUMsR0FBRyxXQUFXLEVBQUUsQ0FBQyxDQUFBO1FBQ3hGLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDakMsQ0FBQyxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMscUNBQXFDLEVBQUUsR0FBRyxFQUFFO1FBQzdDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUM3QyxNQUFNLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNqRCxDQUFDLENBQUMsQ0FBQTtRQUVGLE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsZ0NBQWdDLENBQUMsQ0FBQTtRQUN0RSxPQUFPLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFBO0lBQzlCLENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLDBCQUEwQixFQUFFLEdBQUcsRUFBRTtRQUNsQyxNQUFNLFlBQVksR0FBRyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQTtRQUM5QixTQUFTLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUN4RCxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3pDLENBQUMsQ0FBQyxDQUFBO1FBRUYsTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO1FBQ3hFLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1QyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFcEQsT0FBTyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUM5QixDQUFDLENBQUMsQ0FBQTtBQUNOLENBQUMsQ0FBQyxDQUFBIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3RlbmV0Nzc1MC90cGRlc2Fycm9sbG9mZS9MaWJlcnRhZG50LUZyb250RW5kL3NyYy9hcHAvcmVjbHVzb3MvcmVjbHVzb3Muc2VydmljZS5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBDbGllbnRUZXN0aW5nTW9kdWxlLCBIdHRwVGVzdGluZ0NvbnRyb2xsZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cC90ZXN0aW5nJ1xuaW1wb3J0IHsgVGVzdEJlZCB9IGZyb20gXCJAYW5ndWxhci9jb3JlL3Rlc3RpbmdcIlxuaW1wb3J0IHsgUmVjbHVzb3NTZXJ2aWNlIH0gZnJvbSAnLi9yZWNsdXNvcy5zZXJ2aWNlJ1xuaW1wb3J0IHsgc2VydmljZXNWZXJzaW9uIH0gZnJvbSAndHlwZXNjcmlwdCc7XG5cbmRlc2NyaWJlKCdSZWNsdXNvU2VydmljZSB0ZXN0cycsICgpID0+IHtcbiAgICBsZXQgcl9zZXJ2aWNlOiBSZWNsdXNvc1NlcnZpY2VcbiAgICBsZXQgY29udHJvbGxlcjogSHR0cFRlc3RpbmdDb250cm9sbGVyXG4gICAgbGV0IG51ZXZvX3JlY2x1c28gPSB7XG4gICAgICBcIm5vbWJyZVwiOiBcIkJyaXR0bmV5XCIsXG4gICAgICBcImFwZWxsaWRvXCI6IFwiU3BlYXJzXCIsXG4gICAgICBcImRuaVwiOiAyMDIwNzUyLFxuICAgICAgXCJmZWNoYV9uYWNcIjogXCIyMDA0LTAxLTAxXCJcbiAgICB9XG5cbiAgICBsZXQgbnVldmFfY29uZGVuYSA9IHtcbiAgICAgIFwiY29kX3JlY2x1c29cIjogNCxcbiAgICAgIFwiY29kX3NlbnRlbmNpYXNcIjogWzEsIDJdXG4gICAgfVxuXG4gICAgbGV0IHVub3NfcmVjbHVzb3MgPSBbXG4gICAgICB7XG4gICAgICAgIFwiY29kX3JlY2x1c29cIjogMSxcbiAgICAgICAgXCJub21icmVcIjogXCJKdWFuXCIsXG4gICAgICAgIFwiYXBlbGxpZG9cIjogXCJNYWNyb25cIixcbiAgICAgICAgXCJkbmlcIjogMjAyMDIwMixcbiAgICAgICAgXCJmZWNoYV9uYWNcIjogXCIyMDA0LTAxLTAxXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwiY29kX3JlY2x1c29cIjogMixcbiAgICAgICAgXCJub21icmVcIjogXCJFc3RldmFuXCIsXG4gICAgICAgIFwiYXBlbGxpZG9cIjogXCJRdWl0b1wiLFxuICAgICAgICBcImRuaVwiOiAyMDIwMjAzLFxuICAgICAgICBcImZlY2hhX25hY1wiOiBcIjIwMDQtMDEtMDFcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJjb2RfcmVjbHVzb1wiOiAzLFxuICAgICAgICBcIm5vbWJyZVwiOiBcIkNhcmxvc1wiLFxuICAgICAgICBcImFwZWxsaWRvXCI6IFwiRnJlZGlja3NlblwiLFxuICAgICAgICBcImRuaVwiOiAyMDIwMjA0LFxuICAgICAgICBcImZlY2hhX25hY1wiOiBcIjIwMDQtMDEtMDFcIlxuICAgICAgfVxuICAgIF1cblxuICAgIGJlZm9yZUVhY2goYXN5bmMgKCkgPT4ge1xuICAgICAgVGVzdEJlZC5jb25maWd1cmVUZXN0aW5nTW9kdWxlKHtcbiAgICAgICAgICBpbXBvcnRzOiBbXG4gICAgICAgICAgICAgIEh0dHBDbGllbnRUZXN0aW5nTW9kdWxlIC8vTk8gYm9ycmFyIGVzdGEgcGFydGVcbiAgICAgICAgICBdLFxuICAgICAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICAgICAgUmVjbHVzb3NTZXJ2aWNlLFxuICAgICAgICAgIF1cbiAgICAgIH0pXG4gICAgICByX3NlcnZpY2UgPSBUZXN0QmVkLmluamVjdChSZWNsdXNvc1NlcnZpY2UpXG4gICAgICBjb250cm9sbGVyID0gVGVzdEJlZC5pbmplY3QoSHR0cFRlc3RpbmdDb250cm9sbGVyKVxuICAgIH0pXG5cbiAgICBpdCgnZGViZXJpYSBjcmVhciB1biBzZXJ2aWNpbycsICgpID0+IHtcbiAgICAgIGV4cGVjdChyX3NlcnZpY2UpLnRvQmVUcnV0aHkoKVxuICAgIH0pXG5cbiAgICBpdCgnZGViZXJpYSBkZXZvbHZlciB1biBzb2xvIHJlY2x1c28nLCAoKSA9PiB7XG4gICAgICBsZXQgY29kX3JlY2x1c28gPSAyXG4gICAgICByX3NlcnZpY2UuZ2V0T25lUmVjbHVzbyhjb2RfcmVjbHVzbykuc3Vic2NyaWJlKHJlc3BvbnNlID0+IHtcbiAgICAgICAgbGV0IHJlY2x1c28gPSB1bm9zX3JlY2x1c29zWzBdXG4gICAgICAgIGV4cGVjdChyZWNsdXNvLm5vbWJyZSkudG9FcXVhbCgnSnVhbicpXG4gICAgICAgIGV4cGVjdChyZWNsdXNvLmFwZWxsaWRvKS50b0VxdWFsKCdNYWNyb24nKVxuICAgICAgfSlcblxuICAgICAgY29uc3QgcmVxdWVzdCA9IGNvbnRyb2xsZXIuZXhwZWN0T25lKFwiaHR0cDovL2xvY2FsaG9zdDo4MDgwL3JlY2x1c29zL1wiK2Ake2NvZF9yZWNsdXNvfWApXG4gICAgICByZXF1ZXN0LmZsdXNoKHVub3NfcmVjbHVzb3NbMF0pXG4gICAgfSlcblxuICAgIGl0KCdkZWJlcmlhIGRldm9sdmVyIHRvZG9zIGxvcyByZWNsdXNvcycsICgpID0+IHtcbiAgICAgIHJfc2VydmljZS5nZXRSZWNsdXNvcygpLnN1YnNjcmliZSgocmVzcG9uc2UpID0+IHtcbiAgICAgICAgZXhwZWN0KHVub3NfcmVjbHVzb3MubGVuZ3RoKS50b0JlR3JlYXRlclRoYW4oMClcbiAgICAgIH0pXG5cbiAgICAgIGNvbnN0IHJlcXVlc3QgPSBjb250cm9sbGVyLmV4cGVjdE9uZShcImh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9yZWNsdXNvc1wiKVxuICAgICAgcmVxdWVzdC5mbHVzaCh1bm9zX3JlY2x1c29zKVxuICAgIH0pXG5cbiAgICBpdCgnZGViZXJpYSBjcmVhciB1biByZWNsdXNvJywgKCkgPT4ge1xuICAgICAgY29uc3QgbW9ja1Jlc3BvbnNlID0geyBpZDogNCB9XG4gICAgICByX3NlcnZpY2UucG9zdFJlY2x1c28obnVldm9fcmVjbHVzbykuc3Vic2NyaWJlKHJlc3BvbnNlID0+IHtcbiAgICAgICAgZXhwZWN0KHJlc3BvbnNlKS50b0VxdWFsKG1vY2tSZXNwb25zZSk7XG4gICAgICB9KVxuXG4gICAgICBjb25zdCByZXF1ZXN0ID0gY29udHJvbGxlci5leHBlY3RPbmUoJ2h0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9yZWNsdXNvcy8nKTtcbiAgICAgIGV4cGVjdChyZXF1ZXN0LnJlcXVlc3QubWV0aG9kKS50b0JlKCdQT1NUJyk7XG4gICAgICBleHBlY3QocmVxdWVzdC5yZXF1ZXN0LmJvZHkpLnRvRXF1YWwobnVldm9fcmVjbHVzbyk7XG4gICAgXG4gICAgICByZXF1ZXN0LmZsdXNoKG1vY2tSZXNwb25zZSk7XG4gICAgfSlcbn0pXG5cblxuXG4iXSwidmVyc2lvbiI6M30=