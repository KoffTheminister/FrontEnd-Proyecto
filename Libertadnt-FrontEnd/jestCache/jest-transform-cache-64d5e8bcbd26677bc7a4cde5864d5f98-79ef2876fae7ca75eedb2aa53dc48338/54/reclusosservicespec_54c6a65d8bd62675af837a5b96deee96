6d1cb5456728c3f3c895f426de24b0e9
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/common/http/testing");
const testing_2 = require("@angular/core/testing");
const reclusos_service_1 = require("./reclusos.service");
const rxjs_1 = require("rxjs");
describe('ReclusoService tests', () => {
    let r_service;
    let controller;
    let nuevo_recluso = {
        "nombre": "Brittney",
        "apellido": "Spears",
        "dni": 2020752,
        "fecha_nac": "2004-01-01"
    };
    let nueva_condena = {
        "cod_recluso": 4,
        "cod_sentencias": [1, 2]
    };
    let unos_reclusos = [
        {
            "cod_recluso": 1,
            "nombre": "Juan",
            "apellido": "Macron",
            "dni": 2020202,
            "fecha_nac": "2004-01-01"
        },
        {
            "cod_recluso": 2,
            "nombre": "Estevan",
            "apellido": "Quito",
            "dni": 2020203,
            "fecha_nac": "2004-01-01"
        },
        {
            "cod_recluso": 3,
            "nombre": "Carlos",
            "apellido": "Fredicksen",
            "dni": 2020204,
            "fecha_nac": "2004-01-01"
        }
    ];
    beforeEach(async () => {
        testing_2.TestBed.configureTestingModule({
            imports: [
                testing_1.HttpClientTestingModule //NO borrar esta parte
            ],
            providers: [
                reclusos_service_1.ReclusosService,
            ]
        });
        r_service = testing_2.TestBed.inject(reclusos_service_1.ReclusosService);
        controller = testing_2.TestBed.inject(testing_1.HttpTestingController);
    });
    it('deberia crear un servicio', () => {
        expect(r_service).toBeTruthy();
    });
    it('deberia devolver un solo recluso', () => {
        let cod_recluso = 2;
        r_service.getOneRecluso(cod_recluso).subscribe(response => {
            let recluso = unos_reclusos[0];
            expect(recluso.nombre).toEqual('Juan');
            expect(recluso.apellido).toEqual('Macron');
        });
        const request = controller.expectOne("http://localhost:8080/reclusos/" + `${cod_recluso}`);
        request.flush(unos_reclusos[0]);
    });
    it('deberia devolver todos los reclusos', () => {
        r_service.getReclusos().subscribe((response) => {
            expect(unos_reclusos.length).toBeGreaterThan(0);
        });
        const request = controller.expectOne("http://localhost:8080/reclusos");
        request.flush(unos_reclusos);
    });
    it('deberia crear un recluso', () => {
        const mockResponse = { id: 4 };
        r_service.postRecluso(nuevo_recluso).pipe((0, rxjs_1.take)(1)).subscribe(response => {
            expect(response).toEqual(mockResponse);
        });
        const request = controller.expectOne('http://localhost:8080/reclusos/');
        expect(request.request.method).toBe('POST');
        expect(request.request.body).toEqual(nuevo_recluso);
        request.flush(mockResponse);
        //
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvdGVuZXQ3NzUwL3RwZGVzYXJyb2xsb2ZlL0xpYmVydGFkbnQtRnJvbnRFbmQvc3JjL2FwcC9yZWNsdXNvcy9yZWNsdXNvcy5zZXJ2aWNlLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSwwREFBNkY7QUFDN0YsbURBQStDO0FBQy9DLHlEQUFvRDtBQUVwRCwrQkFBNEI7QUFFNUIsUUFBUSxDQUFDLHNCQUFzQixFQUFFLEdBQUcsRUFBRTtJQUNsQyxJQUFJLFNBQTBCLENBQUE7SUFDOUIsSUFBSSxVQUFpQyxDQUFBO0lBQ3JDLElBQUksYUFBYSxHQUFHO1FBQ2xCLFFBQVEsRUFBRSxVQUFVO1FBQ3BCLFVBQVUsRUFBRSxRQUFRO1FBQ3BCLEtBQUssRUFBRSxPQUFPO1FBQ2QsV0FBVyxFQUFFLFlBQVk7S0FDMUIsQ0FBQTtJQUVELElBQUksYUFBYSxHQUFHO1FBQ2xCLGFBQWEsRUFBRSxDQUFDO1FBQ2hCLGdCQUFnQixFQUFFLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUN6QixDQUFBO0lBRUQsSUFBSSxhQUFhLEdBQUc7UUFDbEI7WUFDRSxhQUFhLEVBQUUsQ0FBQztZQUNoQixRQUFRLEVBQUUsTUFBTTtZQUNoQixVQUFVLEVBQUUsUUFBUTtZQUNwQixLQUFLLEVBQUUsT0FBTztZQUNkLFdBQVcsRUFBRSxZQUFZO1NBQzFCO1FBQ0Q7WUFDRSxhQUFhLEVBQUUsQ0FBQztZQUNoQixRQUFRLEVBQUUsU0FBUztZQUNuQixVQUFVLEVBQUUsT0FBTztZQUNuQixLQUFLLEVBQUUsT0FBTztZQUNkLFdBQVcsRUFBRSxZQUFZO1NBQzFCO1FBQ0Q7WUFDRSxhQUFhLEVBQUUsQ0FBQztZQUNoQixRQUFRLEVBQUUsUUFBUTtZQUNsQixVQUFVLEVBQUUsWUFBWTtZQUN4QixLQUFLLEVBQUUsT0FBTztZQUNkLFdBQVcsRUFBRSxZQUFZO1NBQzFCO0tBQ0YsQ0FBQTtJQUVELFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNwQixpQkFBTyxDQUFDLHNCQUFzQixDQUFDO1lBQzNCLE9BQU8sRUFBRTtnQkFDTCxpQ0FBdUIsQ0FBQyxzQkFBc0I7YUFDakQ7WUFDRCxTQUFTLEVBQUU7Z0JBQ1Qsa0NBQWU7YUFDaEI7U0FDSixDQUFDLENBQUE7UUFDRixTQUFTLEdBQUcsaUJBQU8sQ0FBQyxNQUFNLENBQUMsa0NBQWUsQ0FBQyxDQUFBO1FBQzNDLFVBQVUsR0FBRyxpQkFBTyxDQUFDLE1BQU0sQ0FBQywrQkFBcUIsQ0FBQyxDQUFBO0lBQ3BELENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLDJCQUEyQixFQUFFLEdBQUcsRUFBRTtRQUNuQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUE7SUFDaEMsQ0FBQyxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMsa0NBQWtDLEVBQUUsR0FBRyxFQUFFO1FBQzFDLElBQUksV0FBVyxHQUFHLENBQUMsQ0FBQTtRQUNuQixTQUFTLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUN4RCxJQUFJLE9BQU8sR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDOUIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUE7WUFDdEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDNUMsQ0FBQyxDQUFDLENBQUE7UUFFRixNQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLGlDQUFpQyxHQUFDLEdBQUcsV0FBVyxFQUFFLENBQUMsQ0FBQTtRQUN4RixPQUFPLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ2pDLENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLHFDQUFxQyxFQUFFLEdBQUcsRUFBRTtRQUM3QyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDN0MsTUFBTSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDakQsQ0FBQyxDQUFDLENBQUE7UUFFRixNQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLGdDQUFnQyxDQUFDLENBQUE7UUFDdEUsT0FBTyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQTtJQUM5QixDQUFDLENBQUMsQ0FBQTtJQUVGLEVBQUUsQ0FBQywwQkFBMEIsRUFBRSxHQUFHLEVBQUU7UUFDbEMsTUFBTSxZQUFZLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUE7UUFDOUIsU0FBUyxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBQSxXQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDdEUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN6QyxDQUFDLENBQUMsQ0FBQTtRQUVGLE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsaUNBQWlDLENBQUMsQ0FBQztRQUN4RSxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDNUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRXBELE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUE7UUFDM0IsRUFBRTtJQUNKLENBQUMsQ0FBQyxDQUFBO0FBQ04sQ0FBQyxDQUFDLENBQUEiLCJuYW1lcyI6W10sInNvdXJjZXMiOlsiL2hvbWUvdGVuZXQ3NzUwL3RwZGVzYXJyb2xsb2ZlL0xpYmVydGFkbnQtRnJvbnRFbmQvc3JjL2FwcC9yZWNsdXNvcy9yZWNsdXNvcy5zZXJ2aWNlLnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudFRlc3RpbmdNb2R1bGUsIEh0dHBUZXN0aW5nQ29udHJvbGxlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwL3Rlc3RpbmcnXG5pbXBvcnQgeyBUZXN0QmVkIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmUvdGVzdGluZ1wiXG5pbXBvcnQgeyBSZWNsdXNvc1NlcnZpY2UgfSBmcm9tICcuL3JlY2x1c29zLnNlcnZpY2UnXG5pbXBvcnQgeyBzZXJ2aWNlc1ZlcnNpb24gfSBmcm9tICd0eXBlc2NyaXB0JztcbmltcG9ydCB7IHRha2UgfSBmcm9tICdyeGpzJztcblxuZGVzY3JpYmUoJ1JlY2x1c29TZXJ2aWNlIHRlc3RzJywgKCkgPT4ge1xuICAgIGxldCByX3NlcnZpY2U6IFJlY2x1c29zU2VydmljZVxuICAgIGxldCBjb250cm9sbGVyOiBIdHRwVGVzdGluZ0NvbnRyb2xsZXJcbiAgICBsZXQgbnVldm9fcmVjbHVzbyA9IHtcbiAgICAgIFwibm9tYnJlXCI6IFwiQnJpdHRuZXlcIixcbiAgICAgIFwiYXBlbGxpZG9cIjogXCJTcGVhcnNcIixcbiAgICAgIFwiZG5pXCI6IDIwMjA3NTIsXG4gICAgICBcImZlY2hhX25hY1wiOiBcIjIwMDQtMDEtMDFcIlxuICAgIH1cblxuICAgIGxldCBudWV2YV9jb25kZW5hID0ge1xuICAgICAgXCJjb2RfcmVjbHVzb1wiOiA0LFxuICAgICAgXCJjb2Rfc2VudGVuY2lhc1wiOiBbMSwgMl1cbiAgICB9XG5cbiAgICBsZXQgdW5vc19yZWNsdXNvcyA9IFtcbiAgICAgIHtcbiAgICAgICAgXCJjb2RfcmVjbHVzb1wiOiAxLFxuICAgICAgICBcIm5vbWJyZVwiOiBcIkp1YW5cIixcbiAgICAgICAgXCJhcGVsbGlkb1wiOiBcIk1hY3JvblwiLFxuICAgICAgICBcImRuaVwiOiAyMDIwMjAyLFxuICAgICAgICBcImZlY2hhX25hY1wiOiBcIjIwMDQtMDEtMDFcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJjb2RfcmVjbHVzb1wiOiAyLFxuICAgICAgICBcIm5vbWJyZVwiOiBcIkVzdGV2YW5cIixcbiAgICAgICAgXCJhcGVsbGlkb1wiOiBcIlF1aXRvXCIsXG4gICAgICAgIFwiZG5pXCI6IDIwMjAyMDMsXG4gICAgICAgIFwiZmVjaGFfbmFjXCI6IFwiMjAwNC0wMS0wMVwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcImNvZF9yZWNsdXNvXCI6IDMsXG4gICAgICAgIFwibm9tYnJlXCI6IFwiQ2FybG9zXCIsXG4gICAgICAgIFwiYXBlbGxpZG9cIjogXCJGcmVkaWNrc2VuXCIsXG4gICAgICAgIFwiZG5pXCI6IDIwMjAyMDQsXG4gICAgICAgIFwiZmVjaGFfbmFjXCI6IFwiMjAwNC0wMS0wMVwiXG4gICAgICB9XG4gICAgXVxuXG4gICAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgICAgIGltcG9ydHM6IFtcbiAgICAgICAgICAgICAgSHR0cENsaWVudFRlc3RpbmdNb2R1bGUgLy9OTyBib3JyYXIgZXN0YSBwYXJ0ZVxuICAgICAgICAgIF0sXG4gICAgICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgICAgICBSZWNsdXNvc1NlcnZpY2UsXG4gICAgICAgICAgXVxuICAgICAgfSlcbiAgICAgIHJfc2VydmljZSA9IFRlc3RCZWQuaW5qZWN0KFJlY2x1c29zU2VydmljZSlcbiAgICAgIGNvbnRyb2xsZXIgPSBUZXN0QmVkLmluamVjdChIdHRwVGVzdGluZ0NvbnRyb2xsZXIpXG4gICAgfSlcblxuICAgIGl0KCdkZWJlcmlhIGNyZWFyIHVuIHNlcnZpY2lvJywgKCkgPT4ge1xuICAgICAgZXhwZWN0KHJfc2VydmljZSkudG9CZVRydXRoeSgpXG4gICAgfSlcblxuICAgIGl0KCdkZWJlcmlhIGRldm9sdmVyIHVuIHNvbG8gcmVjbHVzbycsICgpID0+IHtcbiAgICAgIGxldCBjb2RfcmVjbHVzbyA9IDJcbiAgICAgIHJfc2VydmljZS5nZXRPbmVSZWNsdXNvKGNvZF9yZWNsdXNvKS5zdWJzY3JpYmUocmVzcG9uc2UgPT4ge1xuICAgICAgICBsZXQgcmVjbHVzbyA9IHVub3NfcmVjbHVzb3NbMF1cbiAgICAgICAgZXhwZWN0KHJlY2x1c28ubm9tYnJlKS50b0VxdWFsKCdKdWFuJylcbiAgICAgICAgZXhwZWN0KHJlY2x1c28uYXBlbGxpZG8pLnRvRXF1YWwoJ01hY3JvbicpXG4gICAgICB9KVxuXG4gICAgICBjb25zdCByZXF1ZXN0ID0gY29udHJvbGxlci5leHBlY3RPbmUoXCJodHRwOi8vbG9jYWxob3N0OjgwODAvcmVjbHVzb3MvXCIrYCR7Y29kX3JlY2x1c299YClcbiAgICAgIHJlcXVlc3QuZmx1c2godW5vc19yZWNsdXNvc1swXSlcbiAgICB9KVxuXG4gICAgaXQoJ2RlYmVyaWEgZGV2b2x2ZXIgdG9kb3MgbG9zIHJlY2x1c29zJywgKCkgPT4ge1xuICAgICAgcl9zZXJ2aWNlLmdldFJlY2x1c29zKCkuc3Vic2NyaWJlKChyZXNwb25zZSkgPT4ge1xuICAgICAgICBleHBlY3QodW5vc19yZWNsdXNvcy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKVxuICAgICAgfSlcblxuICAgICAgY29uc3QgcmVxdWVzdCA9IGNvbnRyb2xsZXIuZXhwZWN0T25lKFwiaHR0cDovL2xvY2FsaG9zdDo4MDgwL3JlY2x1c29zXCIpXG4gICAgICByZXF1ZXN0LmZsdXNoKHVub3NfcmVjbHVzb3MpXG4gICAgfSlcblxuICAgIGl0KCdkZWJlcmlhIGNyZWFyIHVuIHJlY2x1c28nLCAoKSA9PiB7XG4gICAgICBjb25zdCBtb2NrUmVzcG9uc2UgPSB7IGlkOiA0IH1cbiAgICAgIHJfc2VydmljZS5wb3N0UmVjbHVzbyhudWV2b19yZWNsdXNvKS5waXBlKHRha2UoMSkpLnN1YnNjcmliZShyZXNwb25zZSA9PiB7XG4gICAgICAgIGV4cGVjdChyZXNwb25zZSkudG9FcXVhbChtb2NrUmVzcG9uc2UpO1xuICAgICAgfSlcblxuICAgICAgY29uc3QgcmVxdWVzdCA9IGNvbnRyb2xsZXIuZXhwZWN0T25lKCdodHRwOi8vbG9jYWxob3N0OjgwODAvcmVjbHVzb3MvJyk7XG4gICAgICBleHBlY3QocmVxdWVzdC5yZXF1ZXN0Lm1ldGhvZCkudG9CZSgnUE9TVCcpO1xuICAgICAgZXhwZWN0KHJlcXVlc3QucmVxdWVzdC5ib2R5KS50b0VxdWFsKG51ZXZvX3JlY2x1c28pO1xuICAgIFxuICAgICAgcmVxdWVzdC5mbHVzaChtb2NrUmVzcG9uc2UpXG4gICAgICAvL1xuICAgIH0pXG59KVxuXG5cblxuIl0sInZlcnNpb24iOjN9