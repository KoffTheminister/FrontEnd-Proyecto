473753ecfbfcb5f2fc7ca86bb1c4950b
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const log_in_component_1 = require("./log-in.component");
const usuario_service_1 = require("./usuario.service");
const router_1 = require("@angular/router");
const rxjs_1 = require("rxjs");
const un_usuario = {
    "cod_administrador": 1,
    "contrasenia": "123r"
};
const UsuarioServiceMock = {
    postAdministrador: jest.fn(() => {
        return (0, rxjs_1.of)({});
    })
};
describe('LogInComponent', () => {
    let component;
    let fixture;
    beforeEach(async () => {
        await testing_1.TestBed.configureTestingModule({
            // declarations: [
            //   LogInComponent,
            // ],      
            imports: [log_in_component_1.LogInComponent, testing_2.HttpClientTestingModule], //NO borrar esta parte
            providers: [{ provide: usuario_service_1.UsuarioService, useValue: UsuarioServiceMock }, { provide: router_1.ActivatedRoute, useValue: { paramMap: (0, rxjs_1.of)({}) } }]
        })
            .compileComponents();
        fixture = testing_1.TestBed.createComponent(log_in_component_1.LogInComponent);
        component = fixture.componentInstance;
        fixture.detectChanges();
        let service = testing_1.TestBed.inject(usuario_service_1.UsuarioService);
        fixture.detectChanges();
        //UsuarioServiceMock.postAdministrador.mockReturnValue(of({}));
    });
    it('should create', () => {
        const fixture = testing_1.TestBed.createComponent(log_in_component_1.LogInComponent);
        const app = fixture.componentInstance;
        expect(app).toBeTruthy();
    });
    it('llamada a postAdministrador', () => {
        const fixture = testing_1.TestBed.createComponent(log_in_component_1.LogInComponent);
        const app = fixture.componentInstance;
        UsuarioServiceMock.postAdministrador.mockReturnValue((0, rxjs_1.of)({}));
        app.enviarUsuario();
        expect(UsuarioServiceMock.postAdministrador).toHaveBeenCalled();
    });
    it('se genera el h1 en HTML', () => {
        const fixture = testing_1.TestBed.createComponent(log_in_component_1.LogInComponent);
        const app = fixture.componentInstance;
        fixture.detectChanges();
        const copiled = fixture.nativeElement;
        const h1 = copiled.getElementsByTagName('h1');
        expect(h1.length).toBe(1);
    });
    it('bandUsuario se vuelve encontrado ', () => {
        const fixture = testing_1.TestBed.createComponent(log_in_component_1.LogInComponent);
        const app = fixture.componentInstance;
        UsuarioServiceMock.postAdministrador.mockReturnValue((0, rxjs_1.of)({}));
        app.enviarUsuario();
        expect(UsuarioServiceMock.postAdministrador).toHaveBeenCalled();
        expect(app.bandUsuario).toBe('encontrado');
    });
    it('bandUsuario = incorrecto ', () => {
        const fixture = testing_1.TestBed.createComponent(log_in_component_1.LogInComponent);
        const app = fixture.componentInstance;
        UsuarioServiceMock.postAdministrador.mockReturnValue((0, rxjs_1.of)({}));
        app.enviarUsuario();
        expect(UsuarioServiceMock.postAdministrador).toHaveBeenCalled();
        expect(app.bandera).toBe('menu-maestro');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvdGVuZXQ3NzUwL3RwZGVzYXJyb2xsb2ZlL0xpYmVydGFkbnQtRnJvbnRFbmQvc3JjL2FwcC9sb2ctaW4vbG9nLWluLmNvbXBvbmVudC5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsbURBQWtFO0FBQ2xFLDBEQUE2RjtBQUM3Rix5REFBbUQ7QUFDbkQsdURBQWtEO0FBQ2xELDRDQUFpRDtBQUNqRCwrQkFBeUI7QUFHekIsTUFBTSxVQUFVLEdBQUc7SUFDakIsbUJBQW1CLEVBQUUsQ0FBQztJQUN0QixhQUFhLEVBQUUsTUFBTTtDQUN0QixDQUFBO0FBRUQsTUFBTSxrQkFBa0IsR0FBRztJQUN6QixpQkFBaUIsRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRTtRQUM5QixPQUFPLElBQUEsU0FBRSxFQUFDLEVBQUUsQ0FBQyxDQUFBO0lBQ2YsQ0FBQyxDQUFDO0NBQ0gsQ0FBQTtBQUVELFFBQVEsQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLEVBQUU7SUFDOUIsSUFBSSxTQUF5QixDQUFDO0lBQzlCLElBQUksT0FBeUMsQ0FBQztJQUU5QyxVQUFVLENBQUMsS0FBSyxJQUFJLEVBQUU7UUFDcEIsTUFBTSxpQkFBTyxDQUFDLHNCQUFzQixDQUFDO1lBQ25DLGtCQUFrQjtZQUNsQixvQkFBb0I7WUFDcEIsV0FBVztZQUNYLE9BQU8sRUFBRSxDQUFDLGlDQUFjLEVBQUUsaUNBQXVCLENBQUMsRUFBRSxzQkFBc0I7WUFDMUUsU0FBUyxFQUFFLENBQUMsRUFBQyxPQUFPLEVBQUUsZ0NBQWMsRUFBRSxRQUFRLEVBQUUsa0JBQWtCLEVBQUMsRUFBRSxFQUFDLE9BQU8sRUFBRSx1QkFBYyxFQUFFLFFBQVEsRUFBRSxFQUFDLFFBQVEsRUFBRSxJQUFBLFNBQUUsRUFBQyxFQUFFLENBQUMsRUFBQyxFQUFDLENBQUM7U0FDOUgsQ0FBQzthQUNELGlCQUFpQixFQUFFLENBQUE7UUFFcEIsT0FBTyxHQUFHLGlCQUFPLENBQUMsZUFBZSxDQUFDLGlDQUFjLENBQUMsQ0FBQTtRQUNqRCxT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LENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUE7SUFDMUMsQ0FBQyxDQUFDLENBQUE7QUFFSixDQUFDLENBQUMsQ0FBQSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS90ZW5ldDc3NTAvdHBkZXNhcnJvbGxvZmUvTGliZXJ0YWRudC1Gcm9udEVuZC9zcmMvYXBwL2xvZy1pbi9sb2ctaW4uY29tcG9uZW50LnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50Rml4dHVyZSwgVGVzdEJlZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50VGVzdGluZ01vZHVsZSwgSHR0cFRlc3RpbmdDb250cm9sbGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAvdGVzdGluZydcbmltcG9ydCB7IExvZ0luQ29tcG9uZW50IH0gZnJvbSAnLi9sb2ctaW4uY29tcG9uZW50J1xuaW1wb3J0IHsgVXN1YXJpb1NlcnZpY2UgfSBmcm9tICcuL3VzdWFyaW8uc2VydmljZSdcbmltcG9ydCB7IEFjdGl2YXRlZFJvdXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IG9mIH0gZnJvbSAncnhqcydcbmltcG9ydCB7IEJ5IH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5cbmNvbnN0IHVuX3VzdWFyaW8gPSB7XG4gIFwiY29kX2FkbWluaXN0cmFkb3JcIjogMSxcbiAgXCJjb250cmFzZW5pYVwiOiBcIjEyM3JcIlxufVxuXG5jb25zdCBVc3VhcmlvU2VydmljZU1vY2sgPSB7XG4gIHBvc3RBZG1pbmlzdHJhZG9yOiBqZXN0LmZuKCgpID0+IHtcbiAgICByZXR1cm4gb2Yoe30pXG4gIH0pXG59XG5cbmRlc2NyaWJlKCdMb2dJbkNvbXBvbmVudCcsICgpID0+IHtcbiAgbGV0IGNvbXBvbmVudDogTG9nSW5Db21wb25lbnQ7XG4gIGxldCBmaXh0dXJlOiBDb21wb25lbnRGaXh0dXJlPExvZ0luQ29tcG9uZW50PjtcblxuICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgLy8gZGVjbGFyYXRpb25zOiBbXG4gICAgICAvLyAgIExvZ0luQ29tcG9uZW50LFxuICAgICAgLy8gXSwgICAgICBcbiAgICAgIGltcG9ydHM6IFtMb2dJbkNvbXBvbmVudCwgSHR0cENsaWVudFRlc3RpbmdNb2R1bGVdLCAvL05PIGJvcnJhciBlc3RhIHBhcnRlXG4gICAgICBwcm92aWRlcnM6IFt7cHJvdmlkZTogVXN1YXJpb1NlcnZpY2UsIHVzZVZhbHVlOiBVc3VhcmlvU2VydmljZU1vY2t9LCB7cHJvdmlkZTogQWN0aXZhdGVkUm91dGUsIHVzZVZhbHVlOiB7cGFyYW1NYXA6IG9mKHt9KX19XVxuICAgIH0pXG4gICAgLmNvbXBpbGVDb21wb25lbnRzKClcblxuICAgIGZpeHR1cmUgPSBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChMb2dJbkNvbXBvbmVudClcbiAgICBjb21wb25lbnQgPSBmaXh0dXJlLmNvbXBvbmVudEluc3RhbmNlXG4gICAgZml4dHVyZS5kZXRlY3RDaGFuZ2VzKClcbiAgICBsZXQgc2VydmljZSA9IFRlc3RCZWQuaW5qZWN0KFVzdWFyaW9TZXJ2aWNlKVxuICAgIGZpeHR1cmUuZGV0ZWN0Q2hhbmdlcygpXG4gICAgLy9Vc3VhcmlvU2VydmljZU1vY2sucG9zdEFkbWluaXN0cmFkb3IubW9ja1JldHVyblZhbHVlKG9mKHt9KSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgY3JlYXRlJywgKCkgPT4ge1xuICAgIGNvbnN0IGZpeHR1cmUgPSBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChMb2dJbkNvbXBvbmVudClcbiAgICBjb25zdCBhcHAgPSBmaXh0dXJlLmNvbXBvbmVudEluc3RhbmNlXG4gICAgZXhwZWN0KGFwcCkudG9CZVRydXRoeSgpXG4gIH0pXG5cbiAgaXQoJ2xsYW1hZGEgYSBwb3N0QWRtaW5pc3RyYWRvcicsICgpID0+IHtcbiAgICBjb25zdCBmaXh0dXJlID0gVGVzdEJlZC5jcmVhdGVDb21wb25lbnQoTG9nSW5Db21wb25lbnQpXG4gICAgY29uc3QgYXBwID0gZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZVxuICAgIFVzdWFyaW9TZXJ2aWNlTW9jay5wb3N0QWRtaW5pc3RyYWRvci5tb2NrUmV0dXJuVmFsdWUob2Yoe30pKTtcbiAgICBhcHAuZW52aWFyVXN1YXJpbygpXG4gICAgZXhwZWN0KFVzdWFyaW9TZXJ2aWNlTW9jay5wb3N0QWRtaW5pc3RyYWRvcikudG9IYXZlQmVlbkNhbGxlZCgpXG5cbiAgfSlcbiAgXG4gIGl0KCdzZSBnZW5lcmEgZWwgaDEgZW4gSFRNTCcsICgpID0+IHtcbiAgICBjb25zdCBmaXh0dXJlID0gVGVzdEJlZC5jcmVhdGVDb21wb25lbnQoTG9nSW5Db21wb25lbnQpXG4gICAgY29uc3QgYXBwID0gZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZVxuICAgIGZpeHR1cmUuZGV0ZWN0Q2hhbmdlcygpO1xuICAgIGNvbnN0IGNvcGlsZWQgPSBmaXh0dXJlLm5hdGl2ZUVsZW1lbnQgYXMgSFRNTEVsZW1lbnRcbiAgICBjb25zdCBoMSA9IGNvcGlsZWQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2gxJylcbiAgICBleHBlY3QoaDEubGVuZ3RoKS50b0JlKDEpXG5cbiAgfSlcbiAgXG4gIGl0KCdiYW5kVXN1YXJpbyBzZSB2dWVsdmUgZW5jb250cmFkbyAnLCAoKSA9PiB7XG4gICAgY29uc3QgZml4dHVyZSA9IFRlc3RCZWQuY3JlYXRlQ29tcG9uZW50KExvZ0luQ29tcG9uZW50KVxuICAgIGNvbnN0IGFwcCA9IGZpeHR1cmUuY29tcG9uZW50SW5zdGFuY2VcbiAgICBVc3VhcmlvU2VydmljZU1vY2sucG9zdEFkbWluaXN0cmFkb3IubW9ja1JldHVyblZhbHVlKG9mKHt9KSk7XG4gICAgYXBwLmVudmlhclVzdWFyaW8oKVxuICAgIGV4cGVjdChVc3VhcmlvU2VydmljZU1vY2sucG9zdEFkbWluaXN0cmFkb3IpLnRvSGF2ZUJlZW5DYWxsZWQoKVxuICAgIGV4cGVjdChhcHAuYmFuZFVzdWFyaW8pLnRvQmUoJ2VuY29udHJhZG8nKVxuICB9KVxuXG4gIGl0KCdiYW5kVXN1YXJpbyA9IGluY29ycmVjdG8gJywgKCkgPT4ge1xuICAgIGNvbnN0IGZpeHR1cmUgPSBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChMb2dJbkNvbXBvbmVudClcbiAgICBjb25zdCBhcHAgPSBmaXh0dXJlLmNvbXBvbmVudEluc3RhbmNlXG4gICAgVXN1YXJpb1NlcnZpY2VNb2NrLnBvc3RBZG1pbmlzdHJhZG9yLm1vY2tSZXR1cm5WYWx1ZShvZih7fSkpO1xuICAgIGFwcC5lbnZpYXJVc3VhcmlvKClcbiAgICBleHBlY3QoVXN1YXJpb1NlcnZpY2VNb2NrLnBvc3RBZG1pbmlzdHJhZG9yKS50b0hhdmVCZWVuQ2FsbGVkKClcbiAgICBleHBlY3QoYXBwLmJhbmRlcmEpLnRvQmUoJ21lbnUtbWFlc3RybycpXG4gIH0pXG5cbn0pXG5cblxuXG4iXSwidmVyc2lvbiI6M30=