6a299ddd564cc7c883a4483e795fbe76
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/common/http/testing");
const log_in_component_1 = require("./log-in.component");
const usuario_service_js_1 = require("./usuario.service.js");
const UsuarioServiceMock = {
    postAdministrador: jest.fn()
};
describe('LogInComponent', () => {
    let component;
    let fixture;
    beforeEach(async () => {
        await testing_1.TestBed.configureTestingModule({
            declarations: [
                log_in_component_1.LogInComponent,
            ],
            imports: [log_in_component_1.LogInComponent, testing_2.HttpClientTestingModule], //NO borrar esta parte],
            providers: [{ provide: usuario_service_js_1.UsuarioService, useValue: UsuarioServiceMock }]
        })
            .compileComponents();
        fixture = testing_1.TestBed.createComponent(log_in_component_1.LogInComponent);
        component = fixture.componentInstance;
        fixture.detectChanges();
        let service = testing_1.TestBed.inject(usuario_service_js_1.UsuarioService);
        fixture.detectChanges();
    });
    it('should create', () => {
        const fixture = testing_1.TestBed.createComponent(log_in_component_1.LogInComponent);
        const app = fixture.componentInstance;
        expect(component).toBeTruthy();
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvdGVuZXQ3NzUwL3RwZGVzYXJyb2xsb2ZlL0xpYmVydGFkbnQtRnJvbnRFbmQvc3JjL2FwcC9sb2ctaW4vbG9nLWluLmNvbXBvbmVudC5zcGVjLnRzIiwibWFwcGluZ3MiOiI7O0FBQUEsbURBQWtFO0FBQ2xFLDBEQUE2RjtBQUM3Rix5REFBbUQ7QUFDbkQsNkRBQXNEO0FBRXRELE1BQU0sa0JBQWtCLEdBQUc7SUFDekIsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLEVBQUUsRUFBRTtDQUM3QixDQUFBO0FBRUQsUUFBUSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsRUFBRTtJQUM5QixJQUFJLFNBQXlCLENBQUM7SUFDOUIsSUFBSSxPQUF5QyxDQUFDO0lBRTlDLFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNwQixNQUFNLGlCQUFPLENBQUMsc0JBQXNCLENBQUM7WUFDbkMsWUFBWSxFQUFFO2dCQUNaLGlDQUFjO2FBQ2Y7WUFDRCxPQUFPLEVBQUUsQ0FBQyxpQ0FBYyxFQUFFLGlDQUF1QixDQUFDLEVBQUUsd0JBQXdCO1lBQzVFLFNBQVMsRUFBRSxDQUFDLEVBQUMsT0FBTyxFQUFFLG1DQUFjLEVBQUUsUUFBUSxFQUFFLGtCQUFrQixFQUFDLENBQUM7U0FDckUsQ0FBQzthQUNELGlCQUFpQixFQUFFLENBQUE7UUFFcEIsT0FBTyxHQUFHLGlCQUFPLENBQUMsZUFBZSxDQUFDLGlDQUFjLENBQUMsQ0FBQTtRQUNqRCxTQUFTLEdBQUcsT0FBTyxDQUFDLGlCQUFpQixDQUFBO1FBQ3JDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQTtRQUN2QixJQUFJLE9BQU8sR0FBRyxpQkFBTyxDQUFDLE1BQU0sQ0FBQyxtQ0FBYyxDQUFDLENBQUE7UUFDNUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUFBO0lBQ3pCLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGVBQWUsRUFBRSxHQUFHLEVBQUU7UUFDdkIsTUFBTSxPQUFPLEdBQUcsaUJBQU8sQ0FBQyxlQUFlLENBQUMsaUNBQWMsQ0FBQyxDQUFDO1FBQ3hELE1BQU0sR0FBRyxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQztRQUN0QyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDakMsQ0FBQyxDQUFDLENBQUM7QUFFTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS90ZW5ldDc3NTAvdHBkZXNhcnJvbGxvZmUvTGliZXJ0YWRudC1Gcm9udEVuZC9zcmMvYXBwL2xvZy1pbi9sb2ctaW4uY29tcG9uZW50LnNwZWMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50Rml4dHVyZSwgVGVzdEJlZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUvdGVzdGluZyc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50VGVzdGluZ01vZHVsZSwgSHR0cFRlc3RpbmdDb250cm9sbGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAvdGVzdGluZydcbmltcG9ydCB7IExvZ0luQ29tcG9uZW50IH0gZnJvbSAnLi9sb2ctaW4uY29tcG9uZW50J1xuaW1wb3J0IHsgVXN1YXJpb1NlcnZpY2UgfSBmcm9tICcuL3VzdWFyaW8uc2VydmljZS5qcyc7XG5cbmNvbnN0IFVzdWFyaW9TZXJ2aWNlTW9jayA9IHtcbiAgcG9zdEFkbWluaXN0cmFkb3I6IGplc3QuZm4oKVxufVxuXG5kZXNjcmliZSgnTG9nSW5Db21wb25lbnQnLCAoKSA9PiB7XG4gIGxldCBjb21wb25lbnQ6IExvZ0luQ29tcG9uZW50O1xuICBsZXQgZml4dHVyZTogQ29tcG9uZW50Rml4dHVyZTxMb2dJbkNvbXBvbmVudD47XG5cbiAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgYXdhaXQgVGVzdEJlZC5jb25maWd1cmVUZXN0aW5nTW9kdWxlKHtcbiAgICAgIGRlY2xhcmF0aW9uczogW1xuICAgICAgICBMb2dJbkNvbXBvbmVudCxcbiAgICAgIF0sICAgICAgXG4gICAgICBpbXBvcnRzOiBbTG9nSW5Db21wb25lbnQsIEh0dHBDbGllbnRUZXN0aW5nTW9kdWxlXSwgLy9OTyBib3JyYXIgZXN0YSBwYXJ0ZV0sXG4gICAgICBwcm92aWRlcnM6IFt7cHJvdmlkZTogVXN1YXJpb1NlcnZpY2UsIHVzZVZhbHVlOiBVc3VhcmlvU2VydmljZU1vY2t9XVxuICAgIH0pXG4gICAgLmNvbXBpbGVDb21wb25lbnRzKClcblxuICAgIGZpeHR1cmUgPSBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChMb2dJbkNvbXBvbmVudClcbiAgICBjb21wb25lbnQgPSBmaXh0dXJlLmNvbXBvbmVudEluc3RhbmNlXG4gICAgZml4dHVyZS5kZXRlY3RDaGFuZ2VzKClcbiAgICBsZXQgc2VydmljZSA9IFRlc3RCZWQuaW5qZWN0KFVzdWFyaW9TZXJ2aWNlKVxuICAgIGZpeHR1cmUuZGV0ZWN0Q2hhbmdlcygpXG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgY3JlYXRlJywgKCkgPT4ge1xuICAgIGNvbnN0IGZpeHR1cmUgPSBUZXN0QmVkLmNyZWF0ZUNvbXBvbmVudChMb2dJbkNvbXBvbmVudCk7XG4gICAgY29uc3QgYXBwID0gZml4dHVyZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICBleHBlY3QoY29tcG9uZW50KS50b0JlVHJ1dGh5KCk7XG4gIH0pO1xuXG59KTtcblxuXG5cblxuIl0sInZlcnNpb24iOjN9