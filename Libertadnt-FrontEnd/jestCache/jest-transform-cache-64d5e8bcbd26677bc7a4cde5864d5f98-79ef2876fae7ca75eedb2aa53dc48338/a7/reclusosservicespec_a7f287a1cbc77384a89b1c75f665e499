9c3dfdd30a3fe05c659ba3054c779c87
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/common/http/testing");
const testing_2 = require("@angular/core/testing");
const reclusos_service_1 = require("./reclusos.service");
describe('ReclusoService tests', () => {
    let r_service;
    let controller;
    let nuevo_recluso = {
        "nombre": "Brittney",
        "apellido": "Spears",
        "dni": 2020752,
        "fecha_nac": "2004-01-01"
    };
    let unos_reclusos = [
        {
            "cod_recluso": 1,
            "nombre": "Juan",
            "apellido": "Macron",
            "dni": 2020202,
            "fecha_nac": "2004-01-01"
        },
        {
            "cod_recluso": 2,
            "nombre": "Estevan",
            "apellido": "Quito",
            "dni": 2020203,
            "fecha_nac": "2004-01-01"
        },
        {
            "cod_recluso": 3,
            "nombre": "Carlos",
            "apellido": "Fredicksen",
            "dni": 2020204,
            "fecha_nac": "2004-01-01"
        }
    ];
    beforeEach(async () => {
        testing_2.TestBed.configureTestingModule({
            imports: [],
            providers: [
                reclusos_service_1.ReclusosService,
            ]
        });
        r_service = testing_2.TestBed.inject(reclusos_service_1.ReclusosService);
        controller = testing_2.TestBed.inject(testing_1.HttpTestingController);
    });
    it('deberia crear un servicio', () => {
        expect(r_service).toBeTruthy();
    });
    it('deberia devolver un solo recluso', () => {
        let cod_recluso = 2;
        r_service.getOneRecluso(cod_recluso).subscribe(response => {
            let recluso = unos_reclusos[0];
            expect(recluso.nombre).toEqual('Juan');
            expect(recluso.apellido).toEqual('Macron');
        });
        const request = controller.expectOne("http://localhost:8080/reclusos/" + `${cod_recluso}`);
        request.flush(unos_reclusos[0]);
    });
    it('deberia devolver todos los reclusos', () => {
        r_service.getReclusos().subscribe(response => {
            expect(unos_reclusos.length).toBeGreaterThan(0);
        });
        const request = controller.expectOne("http://localhost:8080/reclusos");
        request.flush(unos_reclusos);
    });
    it('deberia crear un recluso', () => {
        // postRecluso(x:any){
        //   return this.http.post<any|JSON>("http://localhost:8080/reclusos/", x);
        // }
        r_service.postRecluso(nuevo_recluso).subscribe(response => {
            expect(response).toEqual(nuevo_recluso);
        });
        const request = controller.expectOne('http://localhost:8080/reclusos');
        expect(request.request.method).toBe('POST');
        expect(request.request.body).toEqual(nuevo_recluso);
        request.flush(nuevo_recluso);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvdGVuZXQ3NzUwL3RwZGVzYXJyb2xsb2ZlL0xpYmVydGFkbnQtRnJvbnRFbmQvc3JjL2FwcC9yZWNsdXNvcy9yZWNsdXNvcy5zZXJ2aWNlLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSwwREFBb0U7QUFDcEUsbURBQStDO0FBQy9DLHlEQUFvRDtBQUdwRCxRQUFRLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO0lBQ2xDLElBQUksU0FBMEIsQ0FBQTtJQUM5QixJQUFJLFVBQWlDLENBQUE7SUFDckMsSUFBSSxhQUFhLEdBQUc7UUFDbEIsUUFBUSxFQUFFLFVBQVU7UUFDcEIsVUFBVSxFQUFFLFFBQVE7UUFDcEIsS0FBSyxFQUFFLE9BQU87UUFDZCxXQUFXLEVBQUUsWUFBWTtLQUMxQixDQUFBO0lBQ0QsSUFBSSxhQUFhLEdBQUc7UUFDbEI7WUFDRSxhQUFhLEVBQUUsQ0FBQztZQUNoQixRQUFRLEVBQUUsTUFBTTtZQUNoQixVQUFVLEVBQUUsUUFBUTtZQUNwQixLQUFLLEVBQUUsT0FBTztZQUNkLFdBQVcsRUFBRSxZQUFZO1NBQzFCO1FBQ0Q7WUFDRSxhQUFhLEVBQUUsQ0FBQztZQUNoQixRQUFRLEVBQUUsU0FBUztZQUNuQixVQUFVLEVBQUUsT0FBTztZQUNuQixLQUFLLEVBQUUsT0FBTztZQUNkLFdBQVcsRUFBRSxZQUFZO1NBQzFCO1FBQ0Q7WUFDRSxhQUFhLEVBQUUsQ0FBQztZQUNoQixRQUFRLEVBQUUsUUFBUTtZQUNsQixVQUFVLEVBQUUsWUFBWTtZQUN4QixLQUFLLEVBQUUsT0FBTztZQUNkLFdBQVcsRUFBRSxZQUFZO1NBQzFCO0tBQ0YsQ0FBQTtJQUVELFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNwQixpQkFBTyxDQUFDLHNCQUFzQixDQUFDO1lBQzNCLE9BQU8sRUFBRSxFQUVSO1lBQ0QsU0FBUyxFQUFFO2dCQUNULGtDQUFlO2FBQ2hCO1NBQ0osQ0FBQyxDQUFBO1FBRUYsU0FBUyxHQUFHLGlCQUFPLENBQUMsTUFBTSxDQUFDLGtDQUFlLENBQUMsQ0FBQTtRQUMzQyxVQUFVLEdBQUcsaUJBQU8sQ0FBQyxNQUFNLENBQUMsK0JBQXFCLENBQUMsQ0FBQTtJQUNwRCxDQUFDLENBQUMsQ0FBQTtJQUVGLEVBQUUsQ0FBQywyQkFBMkIsRUFBRSxHQUFHLEVBQUU7UUFDbkMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFBO0lBQ2hDLENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLGtDQUFrQyxFQUFFLEdBQUcsRUFBRTtRQUMxQyxJQUFJLFdBQVcsR0FBRyxDQUFDLENBQUE7UUFDbkIsU0FBUyxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEVBQUU7WUFDeEQsSUFBSSxPQUFPLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFBO1lBQzlCLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1lBQ3RDLE1BQU0sQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQzVDLENBQUMsQ0FBQyxDQUFBO1FBRUYsTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxpQ0FBaUMsR0FBQyxHQUFHLFdBQVcsRUFBRSxDQUFDLENBQUE7UUFDeEYsT0FBTyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNqQyxDQUFDLENBQUMsQ0FBQTtJQUVGLEVBQUUsQ0FBQyxxQ0FBcUMsRUFBRSxHQUFHLEVBQUU7UUFDN0MsU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUMzQyxNQUFNLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUNqRCxDQUFDLENBQUMsQ0FBQTtRQUNGLE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsZ0NBQWdDLENBQUMsQ0FBQTtRQUN0RSxPQUFPLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFBO0lBQzlCLENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLDBCQUEwQixFQUFFLEdBQUcsRUFBRTtRQUNsQyxzQkFBc0I7UUFDdEIsMkVBQTJFO1FBQzNFLElBQUk7UUFFSixTQUFTLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUN4RCxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQzFDLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3ZFLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1QyxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7UUFFcEQsT0FBTyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUMvQixDQUFDLENBQUMsQ0FBQTtBQUVOLENBQUMsQ0FBQyxDQUFBIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9ob21lL3RlbmV0Nzc1MC90cGRlc2Fycm9sbG9mZS9MaWJlcnRhZG50LUZyb250RW5kL3NyYy9hcHAvcmVjbHVzb3MvcmVjbHVzb3Muc2VydmljZS5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBUZXN0aW5nQ29udHJvbGxlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwL3Rlc3RpbmcnXG5pbXBvcnQgeyBUZXN0QmVkIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmUvdGVzdGluZ1wiXG5pbXBvcnQgeyBSZWNsdXNvc1NlcnZpY2UgfSBmcm9tICcuL3JlY2x1c29zLnNlcnZpY2UnXG5pbXBvcnQgeyBzZXJ2aWNlc1ZlcnNpb24gfSBmcm9tICd0eXBlc2NyaXB0JztcblxuZGVzY3JpYmUoJ1JlY2x1c29TZXJ2aWNlIHRlc3RzJywgKCkgPT4ge1xuICAgIGxldCByX3NlcnZpY2U6IFJlY2x1c29zU2VydmljZVxuICAgIGxldCBjb250cm9sbGVyOiBIdHRwVGVzdGluZ0NvbnRyb2xsZXJcbiAgICBsZXQgbnVldm9fcmVjbHVzbyA9IHtcbiAgICAgIFwibm9tYnJlXCI6IFwiQnJpdHRuZXlcIixcbiAgICAgIFwiYXBlbGxpZG9cIjogXCJTcGVhcnNcIixcbiAgICAgIFwiZG5pXCI6IDIwMjA3NTIsXG4gICAgICBcImZlY2hhX25hY1wiOiBcIjIwMDQtMDEtMDFcIlxuICAgIH1cbiAgICBsZXQgdW5vc19yZWNsdXNvcyA9IFtcbiAgICAgIHtcbiAgICAgICAgXCJjb2RfcmVjbHVzb1wiOiAxLFxuICAgICAgICBcIm5vbWJyZVwiOiBcIkp1YW5cIixcbiAgICAgICAgXCJhcGVsbGlkb1wiOiBcIk1hY3JvblwiLFxuICAgICAgICBcImRuaVwiOiAyMDIwMjAyLFxuICAgICAgICBcImZlY2hhX25hY1wiOiBcIjIwMDQtMDEtMDFcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJjb2RfcmVjbHVzb1wiOiAyLFxuICAgICAgICBcIm5vbWJyZVwiOiBcIkVzdGV2YW5cIixcbiAgICAgICAgXCJhcGVsbGlkb1wiOiBcIlF1aXRvXCIsXG4gICAgICAgIFwiZG5pXCI6IDIwMjAyMDMsXG4gICAgICAgIFwiZmVjaGFfbmFjXCI6IFwiMjAwNC0wMS0wMVwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcImNvZF9yZWNsdXNvXCI6IDMsXG4gICAgICAgIFwibm9tYnJlXCI6IFwiQ2FybG9zXCIsXG4gICAgICAgIFwiYXBlbGxpZG9cIjogXCJGcmVkaWNrc2VuXCIsXG4gICAgICAgIFwiZG5pXCI6IDIwMjAyMDQsXG4gICAgICAgIFwiZmVjaGFfbmFjXCI6IFwiMjAwNC0wMS0wMVwiXG4gICAgICB9XG4gICAgXVxuXG4gICAgYmVmb3JlRWFjaChhc3luYyAoKSA9PiB7XG4gICAgICBUZXN0QmVkLmNvbmZpZ3VyZVRlc3RpbmdNb2R1bGUoe1xuICAgICAgICAgIGltcG9ydHM6IFtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgXSxcbiAgICAgICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgICAgIFJlY2x1c29zU2VydmljZSxcbiAgICAgICAgICBdXG4gICAgICB9KVxuXG4gICAgICByX3NlcnZpY2UgPSBUZXN0QmVkLmluamVjdChSZWNsdXNvc1NlcnZpY2UpXG4gICAgICBjb250cm9sbGVyID0gVGVzdEJlZC5pbmplY3QoSHR0cFRlc3RpbmdDb250cm9sbGVyKVxuICAgIH0pXG5cbiAgICBpdCgnZGViZXJpYSBjcmVhciB1biBzZXJ2aWNpbycsICgpID0+IHtcbiAgICAgIGV4cGVjdChyX3NlcnZpY2UpLnRvQmVUcnV0aHkoKVxuICAgIH0pXG5cbiAgICBpdCgnZGViZXJpYSBkZXZvbHZlciB1biBzb2xvIHJlY2x1c28nLCAoKSA9PiB7XG4gICAgICBsZXQgY29kX3JlY2x1c28gPSAyXG4gICAgICByX3NlcnZpY2UuZ2V0T25lUmVjbHVzbyhjb2RfcmVjbHVzbykuc3Vic2NyaWJlKHJlc3BvbnNlID0+IHtcbiAgICAgICAgbGV0IHJlY2x1c28gPSB1bm9zX3JlY2x1c29zWzBdXG4gICAgICAgIGV4cGVjdChyZWNsdXNvLm5vbWJyZSkudG9FcXVhbCgnSnVhbicpXG4gICAgICAgIGV4cGVjdChyZWNsdXNvLmFwZWxsaWRvKS50b0VxdWFsKCdNYWNyb24nKVxuICAgICAgfSlcblxuICAgICAgY29uc3QgcmVxdWVzdCA9IGNvbnRyb2xsZXIuZXhwZWN0T25lKFwiaHR0cDovL2xvY2FsaG9zdDo4MDgwL3JlY2x1c29zL1wiK2Ake2NvZF9yZWNsdXNvfWApXG4gICAgICByZXF1ZXN0LmZsdXNoKHVub3NfcmVjbHVzb3NbMF0pXG4gICAgfSlcblxuICAgIGl0KCdkZWJlcmlhIGRldm9sdmVyIHRvZG9zIGxvcyByZWNsdXNvcycsICgpID0+IHtcbiAgICAgIHJfc2VydmljZS5nZXRSZWNsdXNvcygpLnN1YnNjcmliZShyZXNwb25zZSA9PiB7XG4gICAgICAgIGV4cGVjdCh1bm9zX3JlY2x1c29zLmxlbmd0aCkudG9CZUdyZWF0ZXJUaGFuKDApXG4gICAgICB9KVxuICAgICAgY29uc3QgcmVxdWVzdCA9IGNvbnRyb2xsZXIuZXhwZWN0T25lKFwiaHR0cDovL2xvY2FsaG9zdDo4MDgwL3JlY2x1c29zXCIpXG4gICAgICByZXF1ZXN0LmZsdXNoKHVub3NfcmVjbHVzb3MpXG4gICAgfSlcblxuICAgIGl0KCdkZWJlcmlhIGNyZWFyIHVuIHJlY2x1c28nLCAoKSA9PiB7XG4gICAgICAvLyBwb3N0UmVjbHVzbyh4OmFueSl7XG4gICAgICAvLyAgIHJldHVybiB0aGlzLmh0dHAucG9zdDxhbnl8SlNPTj4oXCJodHRwOi8vbG9jYWxob3N0OjgwODAvcmVjbHVzb3MvXCIsIHgpO1xuICAgICAgLy8gfVxuXG4gICAgICByX3NlcnZpY2UucG9zdFJlY2x1c28obnVldm9fcmVjbHVzbykuc3Vic2NyaWJlKHJlc3BvbnNlID0+IHtcbiAgICAgICAgZXhwZWN0KHJlc3BvbnNlKS50b0VxdWFsKG51ZXZvX3JlY2x1c28pO1xuICAgICAgfSk7XG4gICAgXG4gICAgICBjb25zdCByZXF1ZXN0ID0gY29udHJvbGxlci5leHBlY3RPbmUoJ2h0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9yZWNsdXNvcycpO1xuICAgICAgZXhwZWN0KHJlcXVlc3QucmVxdWVzdC5tZXRob2QpLnRvQmUoJ1BPU1QnKTtcbiAgICAgIGV4cGVjdChyZXF1ZXN0LnJlcXVlc3QuYm9keSkudG9FcXVhbChudWV2b19yZWNsdXNvKTtcbiAgICBcbiAgICAgIHJlcXVlc3QuZmx1c2gobnVldm9fcmVjbHVzbyk7XG4gICAgfSlcblxufSlcblxuIl0sInZlcnNpb24iOjN9