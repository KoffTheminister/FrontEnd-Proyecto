85155fca85d0fcfa3070a38fea6328d9
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const testing_1 = require("@angular/common/http/testing");
const testing_2 = require("@angular/core/testing");
const reclusos_service_js_1 = require("./reclusos.service.js");
describe('ReclusoService tests', () => {
    let r_service;
    let controller;
    let unos_reclusos = [
        {
            "cod_recluso": 1,
            "nombre": "Juan",
            "apellido": "Macron",
            "dni": 2020202,
            "fecha_nac": "2004-01-01"
        },
        {
            "cod_recluso": 2,
            "nombre": "Estevan",
            "apellido": "Quito",
            "dni": 2020203,
            "fecha_nac": "2004-01-01"
        },
        {
            "cod_recluso": 3,
            "nombre": "Carlos",
            "apellido": "Fredicksen",
            "dni": 2020204,
            "fecha_nac": "2004-01-01"
        }
    ];
    beforeEach(async () => {
        testing_2.TestBed.configureTestingModule({
            imports: [
                testing_1.HttpClientTestingModule
            ],
            providers: [
                reclusos_service_js_1.ReclusosService,
            ]
        });
        r_service = testing_2.TestBed.inject(reclusos_service_js_1.ReclusosService);
        controller = testing_2.TestBed.inject(testing_1.HttpTestingController);
    });
    it('deberia crear un servicio', () => {
        expect(r_service).toBeTruthy();
    });
    it('deberia devolver un solo recluso', () => {
        let cod_recluso = 2;
        r_service.getOneRecluso(cod_recluso).subscribe(response => {
            let recluso = unos_reclusos[0];
            expect(recluso.nombre).toEqual('Juan');
            expect(recluso.apellido).toEqual('Macron');
        });
        const request = controller.expectOne("http://localhost:8080/reclusos/" + `${cod_recluso}`);
        request.flush(unos_reclusos[0]);
    });
    it('deberia devolver un solo recluso', () => {
        r_service.getReclusos().subscribe(response => {
            expect(unos_reclusos.length).toBeGreaterThan(0);
        });
        const request = controller.expectOne("http://localhost:8080/reclusos/");
        request.flush(unos_reclusos);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL2hvbWUvdGVuZXQ3NzUwL3RwZGVzYXJyb2xsb2ZlL0xpYmVydGFkbnQtRnJvbnRFbmQvc3JjL2FwcC9yZWNsdXNvcy9yZWNsdXNvcy5zZXJ2aWNlLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSwwREFBNkY7QUFDN0YsbURBQStDO0FBQy9DLCtEQUF1RDtBQUd2RCxRQUFRLENBQUMsc0JBQXNCLEVBQUUsR0FBRyxFQUFFO0lBQ2xDLElBQUksU0FBMEIsQ0FBQTtJQUM5QixJQUFJLFVBQWlDLENBQUE7SUFDckMsSUFBSSxhQUFhLEdBQUc7UUFDbEI7WUFDRSxhQUFhLEVBQUUsQ0FBQztZQUNoQixRQUFRLEVBQUUsTUFBTTtZQUNoQixVQUFVLEVBQUUsUUFBUTtZQUNwQixLQUFLLEVBQUUsT0FBTztZQUNkLFdBQVcsRUFBRSxZQUFZO1NBQzFCO1FBQ0Q7WUFDRSxhQUFhLEVBQUUsQ0FBQztZQUNoQixRQUFRLEVBQUUsU0FBUztZQUNuQixVQUFVLEVBQUUsT0FBTztZQUNuQixLQUFLLEVBQUUsT0FBTztZQUNkLFdBQVcsRUFBRSxZQUFZO1NBQzFCO1FBQ0Q7WUFDRSxhQUFhLEVBQUUsQ0FBQztZQUNoQixRQUFRLEVBQUUsUUFBUTtZQUNsQixVQUFVLEVBQUUsWUFBWTtZQUN4QixLQUFLLEVBQUUsT0FBTztZQUNkLFdBQVcsRUFBRSxZQUFZO1NBQzFCO0tBQ0YsQ0FBQTtJQUVELFVBQVUsQ0FBQyxLQUFLLElBQUksRUFBRTtRQUNwQixpQkFBTyxDQUFDLHNCQUFzQixDQUFDO1lBQzNCLE9BQU8sRUFBRTtnQkFDTCxpQ0FBdUI7YUFDMUI7WUFDRCxTQUFTLEVBQUU7Z0JBQ1QscUNBQWU7YUFDaEI7U0FDSixDQUFDLENBQUE7UUFFRixTQUFTLEdBQUcsaUJBQU8sQ0FBQyxNQUFNLENBQUMscUNBQWUsQ0FBQyxDQUFBO1FBQzNDLFVBQVUsR0FBRyxpQkFBTyxDQUFDLE1BQU0sQ0FBQywrQkFBcUIsQ0FBQyxDQUFBO0lBQ3BELENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLDJCQUEyQixFQUFFLEdBQUcsRUFBRTtRQUNuQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsVUFBVSxFQUFFLENBQUE7SUFDaEMsQ0FBQyxDQUFDLENBQUE7SUFFRixFQUFFLENBQUMsa0NBQWtDLEVBQUUsR0FBRyxFQUFFO1FBQzFDLElBQUksV0FBVyxHQUFHLENBQUMsQ0FBQTtRQUNuQixTQUFTLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUN4RCxJQUFJLE9BQU8sR0FBRyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUE7WUFDOUIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUE7WUFDdEMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDNUMsQ0FBQyxDQUFDLENBQUE7UUFFRixNQUFNLE9BQU8sR0FBRyxVQUFVLENBQUMsU0FBUyxDQUFDLGlDQUFpQyxHQUFDLEdBQUcsV0FBVyxFQUFFLENBQUMsQ0FBQTtRQUN4RixPQUFPLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ2pDLENBQUMsQ0FBQyxDQUFBO0lBRUYsRUFBRSxDQUFDLGtDQUFrQyxFQUFFLEdBQUcsRUFBRTtRQUMxQyxTQUFTLENBQUMsV0FBVyxFQUFFLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQzNDLE1BQU0sQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ2pELENBQUMsQ0FBQyxDQUFBO1FBRUYsTUFBTSxPQUFPLEdBQUcsVUFBVSxDQUFDLFNBQVMsQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFBO1FBQ3ZFLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUE7SUFDOUIsQ0FBQyxDQUFDLENBQUE7QUFDTixDQUFDLENBQUMsQ0FBQSIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvaG9tZS90ZW5ldDc3NTAvdHBkZXNhcnJvbGxvZmUvTGliZXJ0YWRudC1Gcm9udEVuZC9zcmMvYXBwL3JlY2x1c29zL3JlY2x1c29zLnNlcnZpY2Uuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50VGVzdGluZ01vZHVsZSwgSHR0cFRlc3RpbmdDb250cm9sbGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAvdGVzdGluZydcbmltcG9ydCB7IFRlc3RCZWQgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZS90ZXN0aW5nXCJcbmltcG9ydCB7IFJlY2x1c29zU2VydmljZSB9IGZyb20gJy4vcmVjbHVzb3Muc2VydmljZS5qcydcbmltcG9ydCB7IHNlcnZpY2VzVmVyc2lvbiB9IGZyb20gJ3R5cGVzY3JpcHQnO1xuXG5kZXNjcmliZSgnUmVjbHVzb1NlcnZpY2UgdGVzdHMnLCAoKSA9PiB7XG4gICAgbGV0IHJfc2VydmljZTogUmVjbHVzb3NTZXJ2aWNlXG4gICAgbGV0IGNvbnRyb2xsZXI6IEh0dHBUZXN0aW5nQ29udHJvbGxlclxuICAgIGxldCB1bm9zX3JlY2x1c29zID0gW1xuICAgICAge1xuICAgICAgICBcImNvZF9yZWNsdXNvXCI6IDEsXG4gICAgICAgIFwibm9tYnJlXCI6IFwiSnVhblwiLFxuICAgICAgICBcImFwZWxsaWRvXCI6IFwiTWFjcm9uXCIsXG4gICAgICAgIFwiZG5pXCI6IDIwMjAyMDIsXG4gICAgICAgIFwiZmVjaGFfbmFjXCI6IFwiMjAwNC0wMS0wMVwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcImNvZF9yZWNsdXNvXCI6IDIsXG4gICAgICAgIFwibm9tYnJlXCI6IFwiRXN0ZXZhblwiLFxuICAgICAgICBcImFwZWxsaWRvXCI6IFwiUXVpdG9cIixcbiAgICAgICAgXCJkbmlcIjogMjAyMDIwMyxcbiAgICAgICAgXCJmZWNoYV9uYWNcIjogXCIyMDA0LTAxLTAxXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwiY29kX3JlY2x1c29cIjogMyxcbiAgICAgICAgXCJub21icmVcIjogXCJDYXJsb3NcIixcbiAgICAgICAgXCJhcGVsbGlkb1wiOiBcIkZyZWRpY2tzZW5cIixcbiAgICAgICAgXCJkbmlcIjogMjAyMDIwNCxcbiAgICAgICAgXCJmZWNoYV9uYWNcIjogXCIyMDA0LTAxLTAxXCJcbiAgICAgIH1cbiAgICBdXG5cbiAgICBiZWZvcmVFYWNoKGFzeW5jICgpID0+IHtcbiAgICAgIFRlc3RCZWQuY29uZmlndXJlVGVzdGluZ01vZHVsZSh7XG4gICAgICAgICAgaW1wb3J0czogW1xuICAgICAgICAgICAgICBIdHRwQ2xpZW50VGVzdGluZ01vZHVsZVxuICAgICAgICAgIF0sXG4gICAgICAgICAgcHJvdmlkZXJzOiBbXG4gICAgICAgICAgICBSZWNsdXNvc1NlcnZpY2UsXG4gICAgICAgICAgXVxuICAgICAgfSlcblxuICAgICAgcl9zZXJ2aWNlID0gVGVzdEJlZC5pbmplY3QoUmVjbHVzb3NTZXJ2aWNlKVxuICAgICAgY29udHJvbGxlciA9IFRlc3RCZWQuaW5qZWN0KEh0dHBUZXN0aW5nQ29udHJvbGxlcilcbiAgICB9KVxuXG4gICAgaXQoJ2RlYmVyaWEgY3JlYXIgdW4gc2VydmljaW8nLCAoKSA9PiB7XG4gICAgICBleHBlY3Qocl9zZXJ2aWNlKS50b0JlVHJ1dGh5KClcbiAgICB9KVxuXG4gICAgaXQoJ2RlYmVyaWEgZGV2b2x2ZXIgdW4gc29sbyByZWNsdXNvJywgKCkgPT4ge1xuICAgICAgbGV0IGNvZF9yZWNsdXNvID0gMlxuICAgICAgcl9zZXJ2aWNlLmdldE9uZVJlY2x1c28oY29kX3JlY2x1c28pLnN1YnNjcmliZShyZXNwb25zZSA9PiB7XG4gICAgICAgIGxldCByZWNsdXNvID0gdW5vc19yZWNsdXNvc1swXVxuICAgICAgICBleHBlY3QocmVjbHVzby5ub21icmUpLnRvRXF1YWwoJ0p1YW4nKVxuICAgICAgICBleHBlY3QocmVjbHVzby5hcGVsbGlkbykudG9FcXVhbCgnTWFjcm9uJylcbiAgICAgIH0pXG5cbiAgICAgIGNvbnN0IHJlcXVlc3QgPSBjb250cm9sbGVyLmV4cGVjdE9uZShcImh0dHA6Ly9sb2NhbGhvc3Q6ODA4MC9yZWNsdXNvcy9cIitgJHtjb2RfcmVjbHVzb31gKVxuICAgICAgcmVxdWVzdC5mbHVzaCh1bm9zX3JlY2x1c29zWzBdKVxuICAgIH0pXG5cbiAgICBpdCgnZGViZXJpYSBkZXZvbHZlciB1biBzb2xvIHJlY2x1c28nLCAoKSA9PiB7XG4gICAgICByX3NlcnZpY2UuZ2V0UmVjbHVzb3MoKS5zdWJzY3JpYmUocmVzcG9uc2UgPT4ge1xuICAgICAgICBleHBlY3QodW5vc19yZWNsdXNvcy5sZW5ndGgpLnRvQmVHcmVhdGVyVGhhbigwKVxuICAgICAgfSlcblxuICAgICAgY29uc3QgcmVxdWVzdCA9IGNvbnRyb2xsZXIuZXhwZWN0T25lKFwiaHR0cDovL2xvY2FsaG9zdDo4MDgwL3JlY2x1c29zL1wiKVxuICAgICAgcmVxdWVzdC5mbHVzaCh1bm9zX3JlY2x1c29zKVxuICAgIH0pXG59KVxuXG4iXSwidmVyc2lvbiI6M30=